{
    "HuggingFaceBgeEmbeddings": {
        "BGE Hugging Face Embeddings": "https://python.langchain.com/docs/integrations/text_embedding/bge_huggingface"
    },
    "XinferenceEmbeddings": {
        "Xorbits inference (Xinference)": "https://python.langchain.com/docs/integrations/text_embedding/xinference"
    },
    "DeepInfraEmbeddings": {
        "DeepInfra": "https://python.langchain.com/docs/integrations/text_embedding/deepinfra"
    },
    "HuggingFaceEmbeddings": {
        "Hugging Face Hub": "https://python.langchain.com/docs/integrations/text_embedding/huggingfacehub",
        "Sentence Transformers Embeddings": "https://python.langchain.com/docs/integrations/text_embedding/sentence_transformers",
        "LOTR (Merger Retriever)": "https://python.langchain.com/docs/integrations/retrievers/merger_retriever",
        "Hugging Face": "https://python.langchain.com/docs/integrations/providers/huggingface",
        "ScaNN": "https://python.langchain.com/docs/integrations/vectorstores/scann",
        "Annoy": "https://python.langchain.com/docs/integrations/vectorstores/annoy",
        "Pairwise Embedding Distance ": "https://python.langchain.com/docs/guides/evaluation/comparison/pairwise_embedding_distance",
        "Embedding Distance": "https://python.langchain.com/docs/guides/evaluation/string/embedding_distance",
        "Lost in the middle: The problem with long contexts": "https://python.langchain.com/docs/modules/data_connection/document_transformers/post_retrieval/long_context_reorder"
    },
    "GPT4AllEmbeddings": {
        "GPT4All": "https://python.langchain.com/docs/integrations/text_embedding/gpt4all",
        "Ollama": "https://python.langchain.com/docs/integrations/llms/ollama",
        "Use local LLMs": "https://python.langchain.com/docs/use_cases/question_answering/how_to/local_retrieval_qa",
        "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research"
    },
    "MosaicMLInstructorEmbeddings": {
        "MosaicML embeddings": "https://python.langchain.com/docs/integrations/text_embedding/mosaicml"
    },
    "OpenAIEmbeddings": {
        "OpenAI": "https://python.langchain.com/docs/integrations/providers/openai",
        "AzureOpenAI": "https://python.langchain.com/docs/integrations/text_embedding/azureopenai",
        "RePhraseQueryRetriever": "https://python.langchain.com/docs/integrations/retrievers/re_phrase",
        "Cohere Reranker": "https://python.langchain.com/docs/integrations/retrievers/cohere-reranker",
        "kNN": "https://python.langchain.com/docs/integrations/retrievers/knn",
        "DocArray Retriever": "https://python.langchain.com/docs/integrations/retrievers/docarray_retriever",
        "SVM": "https://python.langchain.com/docs/integrations/retrievers/svm",
        "Pinecone Hybrid Search": "https://python.langchain.com/docs/integrations/retrievers/pinecone_hybrid_search",
        "LOTR (Merger Retriever)": "https://python.langchain.com/docs/integrations/retrievers/merger_retriever",
        "Azure OpenAI": "https://python.langchain.com/docs/integrations/providers/azure_openai",
        "Document Comparison": "https://python.langchain.com/docs/integrations/toolkits/document_comparison_toolkit",
        "Vectorstore Agent": "https://python.langchain.com/docs/integrations/toolkits/vectorstore",
        "LanceDB": "https://python.langchain.com/docs/integrations/vectorstores/lancedb",
        "Weaviate": "https://python.langchain.com/docs/integrations/vectorstores/weaviate",
        "Xata": "https://python.langchain.com/docs/integrations/vectorstores/xata",
        "Redis": "https://python.langchain.com/docs/integrations/vectorstores/redis",
        "PGVector": "https://python.langchain.com/docs/integrations/vectorstores/pgvector",
        "Rockset": "https://python.langchain.com/docs/integrations/vectorstores/rockset",
        "Dingo": "https://python.langchain.com/docs/integrations/vectorstores/dingo",
        "Zilliz": "https://python.langchain.com/docs/integrations/vectorstores/zilliz",
        "SingleStoreDB": "https://python.langchain.com/docs/integrations/vectorstores/singlestoredb",
        "Typesense": "https://python.langchain.com/docs/integrations/vectorstores/typesense",
        "Atlas": "https://python.langchain.com/docs/integrations/vectorstores/atlas",
        "Activeloop's Deep Lake": "https://python.langchain.com/docs/integrations/vectorstores/activeloop_deeplake",
        "Chroma": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
        "Alibaba Cloud OpenSearch": "https://python.langchain.com/docs/integrations/vectorstores/alibabacloud_opensearch",
        "StarRocks": "https://python.langchain.com/docs/integrations/vectorstores/starrocks",
        "scikit-learn": "https://python.langchain.com/docs/integrations/vectorstores/sklearn",
        "DocArrayHnswSearch": "https://python.langchain.com/docs/integrations/vectorstores/docarray_hnsw",
        "MyScale": "https://python.langchain.com/docs/integrations/vectorstores/myscale",
        "ClickHouse Vector Search": "https://python.langchain.com/docs/integrations/vectorstores/clickhouse",
        "Qdrant": "https://python.langchain.com/docs/integrations/vectorstores/qdrant",
        "Tigris": "https://python.langchain.com/docs/integrations/vectorstores/tigris",
        "Supabase (Postgres)": "https://python.langchain.com/docs/integrations/vectorstores/supabase",
        "OpenSearch": "https://python.langchain.com/docs/integrations/vectorstores/opensearch",
        "Pinecone": "https://python.langchain.com/docs/integrations/vectorstores/pinecone",
        "Azure Cognitive Search": "https://python.langchain.com/docs/integrations/vectorstores/azuresearch",
        "Cassandra": "https://python.langchain.com/docs/integrations/vectorstores/cassandra",
        "USearch": "https://python.langchain.com/docs/integrations/vectorstores/usearch",
        "Milvus": "https://python.langchain.com/docs/integrations/vectorstores/milvus",
        "Elasticsearch": "https://python.langchain.com/docs/integrations/vectorstores/elasticsearch",
        "DocArrayInMemorySearch": "https://python.langchain.com/docs/integrations/vectorstores/docarray_in_memory",
        "pg_embedding": "https://python.langchain.com/docs/integrations/vectorstores/pgembedding",
        "FAISS": "https://python.langchain.com/docs/integrations/vectorstores/faiss",
        "AnalyticDB": "https://python.langchain.com/docs/integrations/vectorstores/analyticdb",
        "Hologres": "https://python.langchain.com/docs/integrations/vectorstores/hologres",
        "MongoDB Atlas": "https://python.langchain.com/docs/integrations/vectorstores/mongodb_atlas",
        "Meilisearch": "https://python.langchain.com/docs/integrations/vectorstores/meilisearch",
        "Loading documents from a YouTube url": "https://python.langchain.com/docs/integrations/document_loaders/youtube_audio",
        "Psychic": "https://python.langchain.com/docs/integrations/document_loaders/psychic",
        "Docugami": "https://python.langchain.com/docs/integrations/document_loaders/docugami",
        "Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching",
        "Cookbook": "https://python.langchain.com/docs/guides/expression_language/cookbook",
        "Web Scraping": "https://python.langchain.com/docs/use_cases/web_scraping",
        "Chatbots": "https://python.langchain.com/docs/use_cases/chatbots",
        "Code Understanding": "https://python.langchain.com/docs/use_cases/code_understanding",
        "AutoGPT": "https://python.langchain.com/docs/use_cases/autonomous_agents/autogpt",
        "BabyAGI User Guide": "https://python.langchain.com/docs/use_cases/agents/baby_agi",
        "BabyAGI with Tools": "https://python.langchain.com/docs/use_cases/agents/baby_agi_with_agent",
        "!pip install bs4": "https://python.langchain.com/docs/use_cases/autonomous_agents/marathon_times",
        "QA over Documents": "https://python.langchain.com/docs/use_cases/question_answering/index",
        "Perform context-aware text splitting": "https://python.langchain.com/docs/use_cases/question_answering/how_to/document-context-aware-QA",
        "Conversational Retrieval Agent": "https://python.langchain.com/docs/use_cases/question_answering/how_to/conversational_retrieval_agents",
        "Retrieve from vector stores directly": "https://python.langchain.com/docs/use_cases/question_answering/how_to/vector_db_text_generation",
        "Retrieve as you generate with FLARE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/flare",
        "Improve document indexing with HyDE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/hyde",
        "Analysis of Twitter the-algorithm source code with LangChain, GPT4 and Activeloop's Deep Lake": "https://python.langchain.com/docs/use_cases/question_answering/how_to/code/twitter-the-algorithm-analysis-deeplake",
        "Use LangChain, GPT and Activeloop's Deep Lake to work with code base": "https://python.langchain.com/docs/use_cases/question_answering/how_to/code/code-analysis-deeplake",
        "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa",
        "QA using Activeloop's DeepLake": "https://python.langchain.com/docs/use_cases/question_answering/integrations/semantic-search-over-chat",
        "Plug-and-Plai": "https://python.langchain.com/docs/use_cases/agents/custom_agent_with_plugin_retrieval_using_plugnplai",
        "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/agents/sales_agent_with_context",
        "Custom Agent with PlugIn Retrieval": "https://python.langchain.com/docs/use_cases/agents/custom_agent_with_plugin_retrieval",
        "Generative Agents in LangChain": "https://python.langchain.com/docs/use_cases/agent_simulations/characters",
        "Caching Embeddings": "https://python.langchain.com/docs/modules/data_connection/caching_embeddings",
        "MultiQueryRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/MultiQueryRetriever",
        "Parent Document Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/parent_document_retriever",
        "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research",
        "Weaviate self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/weaviate_self_query",
        "Elasticsearch self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/elasticsearch_self_query",
        "Chroma self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/chroma_self_query",
        "Self-querying with Pinecone": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/pinecone",
        "Self-querying with MyScale": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/myscale_self_query",
        "Deep Lake self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/activeloop_deeplake_self_query",
        "Qdrant self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/qdrant_self_query",
        "How to add memory to a Multi-Input Chain": "https://python.langchain.com/docs/modules/memory/adding_memory_chain_multiple_inputs",
        "Combine agents and vector stores": "https://python.langchain.com/docs/modules/agents/how_to/agent_vectorstore",
        "Custom agent with tool retrieval": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent_with_tool_retrieval",
        "Select by maximal marginal relevance (MMR)": "https://python.langchain.com/docs/modules/model_io/prompts/example_selectors/mmr",
        "Few shot examples for chat models": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot_examples_chat",
        "Loading from LangChainHub": "https://python.langchain.com/docs/modules/chains/how_to/from_hub"
    },
    "VertexAIEmbeddings": {
        "Google Cloud Platform Vertex AI PaLM ": "https://python.langchain.com/docs/integrations/text_embedding/google_vertex_ai_palm"
    },
    "BedrockEmbeddings": {
        "Bedrock Embeddings": "https://python.langchain.com/docs/integrations/text_embedding/bedrock",
        "Bedrock": "https://python.langchain.com/docs/integrations/providers/bedrock"
    },
    "LlamaCppEmbeddings": {
        "Llama-cpp": "https://python.langchain.com/docs/integrations/text_embedding/llamacpp",
        "Llama.cpp": "https://python.langchain.com/docs/integrations/providers/llamacpp"
    },
    "NLPCloudEmbeddings": {
        "NLP Cloud": "https://python.langchain.com/docs/integrations/text_embedding/nlp_cloud"
    },
    "SpacyEmbeddings": {
        "Spacy Embedding": "https://python.langchain.com/docs/integrations/text_embedding/spacy_embedding"
    },
    "HuggingFaceInstructEmbeddings": {
        "InstructEmbeddings": "https://python.langchain.com/docs/integrations/text_embedding/instruct_embeddings"
    },
    "CohereEmbeddings": {
        "Cohere": "https://python.langchain.com/docs/integrations/providers/cohere",
        "How to add memory to a Multi-Input Chain": "https://python.langchain.com/docs/modules/memory/adding_memory_chain_multiple_inputs",
        "Router": "https://python.langchain.com/docs/modules/chains/foundational/router"
    },
    "EdenAiEmbeddings": {
        "EDEN AI": "https://python.langchain.com/docs/integrations/text_embedding/edenai"
    },
    "SentenceTransformerEmbeddings": {
        "Sentence Transformers Embeddings": "https://python.langchain.com/docs/integrations/text_embedding/sentence_transformers",
        "Chroma": "https://python.langchain.com/docs/integrations/vectorstores/chroma"
    },
    "ClarifaiEmbeddings": {
        "Clarifai": "https://python.langchain.com/docs/integrations/providers/clarifai"
    },
    "AwaEmbeddings": {
        "AwaEmbedding": "https://python.langchain.com/docs/integrations/text_embedding/Awa"
    },
    "MiniMaxEmbeddings": {
        "MiniMax": "https://python.langchain.com/docs/integrations/text_embedding/minimax",
        "Minimax": "https://python.langchain.com/docs/integrations/providers/minimax"
    },
    "FakeEmbeddings": {
        "Fake Embeddings": "https://python.langchain.com/docs/integrations/text_embedding/fake",
        "DocArray Retriever": "https://python.langchain.com/docs/integrations/retrievers/docarray_retriever",
        "Vectara": "https://python.langchain.com/docs/integrations/vectorstores/vectara",
        "Tair": "https://python.langchain.com/docs/integrations/vectorstores/tair"
    },
    "ElasticsearchEmbeddings": {
        "Elasticsearch": "https://python.langchain.com/docs/integrations/text_embedding/elasticsearch"
    },
    "SelfHostedEmbeddings": {
        "Self Hosted Embeddings": "https://python.langchain.com/docs/integrations/text_embedding/self-hosted"
    },
    "SelfHostedHuggingFaceEmbeddings": {
        "Self Hosted Embeddings": "https://python.langchain.com/docs/integrations/text_embedding/self-hosted"
    },
    "SelfHostedHuggingFaceInstructEmbeddings": {
        "Self Hosted Embeddings": "https://python.langchain.com/docs/integrations/text_embedding/self-hosted"
    },
    "EmbaasEmbeddings": {
        "Embaas": "https://python.langchain.com/docs/integrations/text_embedding/embaas"
    },
    "JinaEmbeddings": {
        "Jina": "https://python.langchain.com/docs/integrations/providers/jina"
    },
    "AlephAlphaAsymmetricSemanticEmbedding": {
        "Aleph Alpha": "https://python.langchain.com/docs/integrations/providers/aleph_alpha"
    },
    "AlephAlphaSymmetricSemanticEmbedding": {
        "Aleph Alpha": "https://python.langchain.com/docs/integrations/providers/aleph_alpha"
    },
    "DashScopeEmbeddings": {
        "DashScope": "https://python.langchain.com/docs/integrations/text_embedding/dashscope",
        "DashVector": "https://python.langchain.com/docs/integrations/vectorstores/dashvector"
    },
    "TensorflowHubEmbeddings": {
        "TensorflowHub": "https://python.langchain.com/docs/integrations/text_embedding/tensorflowhub",
        "ScaNN": "https://python.langchain.com/docs/integrations/vectorstores/scann"
    },
    "ModelScopeEmbeddings": {
        "ModelScope": "https://python.langchain.com/docs/integrations/providers/modelscope"
    },
    "SagemakerEndpointEmbeddings": {
        "SageMaker Endpoint Embeddings": "https://python.langchain.com/docs/integrations/text_embedding/sagemaker-endpoint",
        "SageMaker Endpoint": "https://python.langchain.com/docs/integrations/providers/sagemaker_endpoint"
    },
    "EmbeddingsContentHandler": {
        "SageMaker Endpoint Embeddings": "https://python.langchain.com/docs/integrations/text_embedding/sagemaker-endpoint"
    },
    "LocalAIEmbeddings": {
        "LocalAI": "https://python.langchain.com/docs/integrations/text_embedding/localai"
    },
    "WebBaseLoader": {
        "RePhraseQueryRetriever": "https://python.langchain.com/docs/integrations/retrievers/re_phrase",
        "Vectorstore Agent": "https://python.langchain.com/docs/integrations/toolkits/vectorstore",
        "WebBaseLoader": "https://python.langchain.com/docs/integrations/document_loaders/web_base",
        "MergeDocLoader": "https://python.langchain.com/docs/integrations/document_loaders/merge_doc_loader",
        "Ollama": "https://python.langchain.com/docs/integrations/llms/ollama",
        "Chatbots": "https://python.langchain.com/docs/use_cases/chatbots",
        "Summarization": "https://python.langchain.com/docs/use_cases/summarization",
        "QA over Documents": "https://python.langchain.com/docs/use_cases/question_answering/index",
        "Use local LLMs": "https://python.langchain.com/docs/use_cases/question_answering/how_to/local_retrieval_qa",
        "MultiQueryRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/MultiQueryRetriever",
        "Combine agents and vector stores": "https://python.langchain.com/docs/modules/agents/how_to/agent_vectorstore"
    },
    "RecursiveCharacterTextSplitter": {
        "RePhraseQueryRetriever": "https://python.langchain.com/docs/integrations/retrievers/re_phrase",
        "Cohere Reranker": "https://python.langchain.com/docs/integrations/retrievers/cohere-reranker",
        "Loading documents from a YouTube url": "https://python.langchain.com/docs/integrations/document_loaders/youtube_audio",
        "Source Code": "https://python.langchain.com/docs/integrations/document_loaders/source_code",
        "Ollama": "https://python.langchain.com/docs/integrations/llms/ollama",
        "Web Scraping": "https://python.langchain.com/docs/use_cases/web_scraping",
        "Chatbots": "https://python.langchain.com/docs/use_cases/chatbots",
        "Code Understanding": "https://python.langchain.com/docs/use_cases/code_understanding",
        "!pip install bs4": "https://python.langchain.com/docs/use_cases/autonomous_agents/marathon_times",
        "QA over Documents": "https://python.langchain.com/docs/use_cases/question_answering/index",
        "Perform context-aware text splitting": "https://python.langchain.com/docs/use_cases/question_answering/how_to/document-context-aware-QA",
        "Use local LLMs": "https://python.langchain.com/docs/use_cases/question_answering/how_to/local_retrieval_qa",
        "QA using Activeloop's DeepLake": "https://python.langchain.com/docs/use_cases/question_answering/integrations/semantic-search-over-chat",
        "MultiQueryRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/MultiQueryRetriever",
        "Parent Document Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/parent_document_retriever",
        "MarkdownHeaderTextSplitter": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/markdown_header_metadata"
    },
    "Chroma": {
        "RePhraseQueryRetriever": "https://python.langchain.com/docs/integrations/retrievers/re_phrase",
        "LOTR (Merger Retriever)": "https://python.langchain.com/docs/integrations/retrievers/merger_retriever",
        "Chroma": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
        "Vectorstore Agent": "https://python.langchain.com/docs/integrations/toolkits/vectorstore",
        "StarRocks": "https://python.langchain.com/docs/integrations/vectorstores/starrocks",
        "Psychic": "https://python.langchain.com/docs/integrations/document_loaders/psychic",
        "Docugami": "https://python.langchain.com/docs/integrations/document_loaders/docugami",
        "Ollama": "https://python.langchain.com/docs/integrations/llms/ollama",
        "Cookbook": "https://python.langchain.com/docs/guides/expression_language/cookbook",
        "Web Scraping": "https://python.langchain.com/docs/use_cases/web_scraping",
        "Chatbots": "https://python.langchain.com/docs/use_cases/chatbots",
        "Code Understanding": "https://python.langchain.com/docs/use_cases/code_understanding",
        "QA over Documents": "https://python.langchain.com/docs/use_cases/question_answering/index",
        "Perform context-aware text splitting": "https://python.langchain.com/docs/use_cases/question_answering/how_to/document-context-aware-QA",
        "Use local LLMs": "https://python.langchain.com/docs/use_cases/question_answering/how_to/local_retrieval_qa",
        "Retrieve from vector stores directly": "https://python.langchain.com/docs/use_cases/question_answering/how_to/vector_db_text_generation",
        "Improve document indexing with HyDE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/hyde",
        "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa",
        "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/agents/sales_agent_with_context",
        "MultiQueryRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/MultiQueryRetriever",
        "Parent Document Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/parent_document_retriever",
        "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research",
        "Chroma self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/chroma_self_query",
        "Lost in the middle: The problem with long contexts": "https://python.langchain.com/docs/modules/data_connection/document_transformers/post_retrieval/long_context_reorder",
        "How to add memory to a Multi-Input Chain": "https://python.langchain.com/docs/modules/memory/adding_memory_chain_multiple_inputs",
        "Combine agents and vector stores": "https://python.langchain.com/docs/modules/agents/how_to/agent_vectorstore",
        "Few shot examples for chat models": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot_examples_chat",
        "Router": "https://python.langchain.com/docs/modules/chains/foundational/router",
        "Loading from LangChainHub": "https://python.langchain.com/docs/modules/chains/how_to/from_hub"
    },
    "ChatOpenAI": {
        "RePhraseQueryRetriever": "https://python.langchain.com/docs/integrations/retrievers/re_phrase",
        "Wikipedia": "https://python.langchain.com/docs/integrations/retrievers/wikipedia",
        "Arxiv": "https://python.langchain.com/docs/integrations/retrievers/arxiv",
        "ChatGPT Plugins": "https://python.langchain.com/docs/integrations/tools/chatgpt_plugins",
        "Human as a tool": "https://python.langchain.com/docs/integrations/tools/human_tools",
        "ArXiv API Tool": "https://python.langchain.com/docs/integrations/tools/arxiv",
        "Metaphor Search": "https://python.langchain.com/docs/integrations/tools/metaphor_search",
        "Shell Tool": "https://python.langchain.com/docs/integrations/tools/bash",
        "Dynamodb Chat Message History": "https://python.langchain.com/docs/integrations/memory/dynamodb_chat_message_history",
        "OpenAI": "https://python.langchain.com/docs/integrations/chat/openai",
        "Context": "https://python.langchain.com/docs/integrations/callbacks/context",
        "Label Studio": "https://python.langchain.com/docs/integrations/callbacks/labelstudio",
        "PromptLayer": "https://python.langchain.com/docs/integrations/callbacks/promptlayer",
        "CnosDB": "https://python.langchain.com/docs/integrations/providers/cnosdb",
        "Log10": "https://python.langchain.com/docs/integrations/providers/log10",
        "Flyte": "https://python.langchain.com/docs/integrations/providers/flyte",
        "Arthur": "https://python.langchain.com/docs/integrations/providers/arthur_tracking",
        "CSV Agent": "https://python.langchain.com/docs/integrations/toolkits/csv",
        "Document Comparison": "https://python.langchain.com/docs/integrations/toolkits/document_comparison_toolkit",
        "Python Agent": "https://python.langchain.com/docs/integrations/toolkits/python",
        "PowerBI Dataset Agent": "https://python.langchain.com/docs/integrations/toolkits/powerbi",
        "SQL Database Agent": "https://python.langchain.com/docs/integrations/toolkits/sql_database",
        "Github Toolkit": "https://python.langchain.com/docs/integrations/toolkits/github",
        "Spark SQL Agent": "https://python.langchain.com/docs/integrations/toolkits/spark_sql",
        "Pandas Dataframe Agent": "https://python.langchain.com/docs/integrations/toolkits/pandas",
        "OpenAI Functions Metadata Tagger": "https://python.langchain.com/docs/integrations/document_transformers/openai_metadata_tagger",
        "Loading documents from a YouTube url": "https://python.langchain.com/docs/integrations/document_loaders/youtube_audio",
        "Figma": "https://python.langchain.com/docs/integrations/document_loaders/figma",
        "Fallbacks": "https://python.langchain.com/docs/guides/fallbacks",
        "Debugging": "https://python.langchain.com/docs/guides/debugging",
        "LangSmith Walkthrough": "https://python.langchain.com/docs/guides/langsmith/walkthrough",
        "Comparing Chain Outputs": "https://python.langchain.com/docs/guides/evaluation/examples/comparisons",
        "Agent Trajectory": "https://python.langchain.com/docs/guides/evaluation/trajectory/trajectory_eval",
        "Custom Trajectory Evaluator": "https://python.langchain.com/docs/guides/evaluation/trajectory/custom",
        "Cookbook": "https://python.langchain.com/docs/guides/expression_language/cookbook",
        "Interface": "https://python.langchain.com/docs/guides/expression_language/interface",
        "Web Scraping": "https://python.langchain.com/docs/use_cases/web_scraping",
        "Chatbots": "https://python.langchain.com/docs/use_cases/chatbots",
        "Summarization": "https://python.langchain.com/docs/use_cases/summarization",
        "Extraction": "https://python.langchain.com/docs/use_cases/extraction",
        "SQL": "https://python.langchain.com/docs/use_cases/sql",
        "Tagging": "https://python.langchain.com/docs/use_cases/tagging",
        "Code Understanding": "https://python.langchain.com/docs/use_cases/code_understanding",
        "AutoGPT": "https://python.langchain.com/docs/use_cases/autonomous_agents/autogpt",
        "!pip install bs4": "https://python.langchain.com/docs/use_cases/autonomous_agents/marathon_times",
        "QA over Documents": "https://python.langchain.com/docs/use_cases/question_answering/index",
        "Perform context-aware text splitting": "https://python.langchain.com/docs/use_cases/question_answering/how_to/document-context-aware-QA",
        "Conversational Retrieval Agent": "https://python.langchain.com/docs/use_cases/question_answering/how_to/conversational_retrieval_agents",
        "Multiple Retrieval Sources": "https://python.langchain.com/docs/use_cases/question_answering/how_to/multiple_retrieval",
        "Cite sources": "https://python.langchain.com/docs/use_cases/question_answering/how_to/qa_citations",
        "Retrieve as you generate with FLARE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/flare",
        "Analysis of Twitter the-algorithm source code with LangChain, GPT4 and Activeloop's Deep Lake": "https://python.langchain.com/docs/use_cases/question_answering/how_to/code/twitter-the-algorithm-analysis-deeplake",
        "Use LangChain, GPT and Activeloop's Deep Lake to work with code base": "https://python.langchain.com/docs/use_cases/question_answering/how_to/code/code-analysis-deeplake",
        "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa",
        "QA using Activeloop's DeepLake": "https://python.langchain.com/docs/use_cases/question_answering/integrations/semantic-search-over-chat",
        "Wikibase Agent": "https://python.langchain.com/docs/use_cases/agents/wikibase_agent",
        "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/agents/sales_agent_with_context",
        "CAMEL Role-Playing Autonomous Cooperative Agents": "https://python.langchain.com/docs/use_cases/agent_simulations/camel_role_playing",
        "Neptune Open Cypher QA Chain": "https://python.langchain.com/docs/use_cases/more/graph/neptune_cypher_qa",
        "NebulaGraphQAChain": "https://python.langchain.com/docs/use_cases/more/graph/graph_nebula_qa",
        "KuzuQAChain": "https://python.langchain.com/docs/use_cases/more/graph/graph_kuzu_qa",
        "HugeGraph QA Chain": "https://python.langchain.com/docs/use_cases/more/graph/graph_hugegraph_qa",
        "GraphSparqlQAChain": "https://python.langchain.com/docs/use_cases/more/graph/graph_sparql_qa",
        "ArangoDB QA chain": "https://python.langchain.com/docs/use_cases/more/graph/graph_arangodb_qa",
        "Neo4j DB QA chain": "https://python.langchain.com/docs/use_cases/more/graph/graph_cypher_qa",
        "How to use a SmartLLMChain": "https://python.langchain.com/docs/use_cases/more/self_check/smart_llm",
        "Multi-Agent Simulated Environment: Petting Zoo": "https://python.langchain.com/docs/use_cases/agent_simulations/petting_zoo",
        "Multi-agent decentralized speaker selection": "https://python.langchain.com/docs/use_cases/agent_simulations/multiagent_bidding",
        "Multi-agent authoritarian speaker selection": "https://python.langchain.com/docs/use_cases/agent_simulations/multiagent_authoritarian",
        "Generative Agents in LangChain": "https://python.langchain.com/docs/use_cases/agent_simulations/characters",
        "Two-Player Dungeons & Dragons": "https://python.langchain.com/docs/use_cases/agent_simulations/two_player_dnd",
        "Multi-Player Dungeons & Dragons": "https://python.langchain.com/docs/use_cases/agent_simulations/multi_player_dnd",
        "Simulated Environment: Gymnasium": "https://python.langchain.com/docs/use_cases/agent_simulations/gymnasium",
        "Agent Debates with Tools": "https://python.langchain.com/docs/use_cases/agent_simulations/two_agent_debate_tools",
        "MultiQueryRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/MultiQueryRetriever",
        "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research",
        "How to add Memory to an LLMChain": "https://python.langchain.com/docs/modules/memory/adding_memory",
        "Custom callback handlers": "https://python.langchain.com/docs/modules/callbacks/custom_callbacks",
        "Async callbacks": "https://python.langchain.com/docs/modules/callbacks/async_callbacks",
        "Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools",
        "Tools as OpenAI Functions": "https://python.langchain.com/docs/modules/agents/tools/tools_as_openai_functions",
        "OpenAI Multi Functions Agent": "https://python.langchain.com/docs/modules/agents/agent_types/openai_multi_functions_agent",
        "Handle parsing errors": "https://python.langchain.com/docs/modules/agents/how_to/handle_parsing_errors",
        "Running Agent as an Iterator": "https://python.langchain.com/docs/modules/agents/how_to/agent_iter",
        "Add Memory to OpenAI Functions Agent": "https://python.langchain.com/docs/modules/agents/how_to/add_memory_openai_functions",
        "Custom functions with OpenAI Functions Agent": "https://python.langchain.com/docs/modules/agents/how_to/custom-functions-with-openai-functions-agent",
        "Use ToolKits with OpenAI Functions": "https://python.langchain.com/docs/modules/agents/how_to/use_toolkits_with_openai_functions",
        "Retry parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/retry",
        "Pydantic (JSON) parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/pydantic",
        "Prompt Pipelining": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/prompts_pipelining",
        "Connecting to a Feature Store": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/connecting_to_a_feature_store",
        "Custom chain": "https://python.langchain.com/docs/modules/chains/how_to/custom_chain",
        "Using OpenAI functions": "https://python.langchain.com/docs/modules/chains/how_to/openai_functions"
    },
    "RePhraseQueryRetriever": {
        "RePhraseQueryRetriever": "https://python.langchain.com/docs/integrations/retrievers/re_phrase"
    },
    "PromptTemplate": {
        "RePhraseQueryRetriever": "https://python.langchain.com/docs/integrations/retrievers/re_phrase",
        "Zapier Natural Language Actions API": "https://python.langchain.com/docs/integrations/tools/zapier",
        "Dall-E Image Generator": "https://python.langchain.com/docs/integrations/tools/dalle_image_generator",
        "Streamlit Chat Message History": "https://python.langchain.com/docs/integrations/memory/streamlit_chat_message_history",
        "Context": "https://python.langchain.com/docs/integrations/callbacks/context",
        "Argilla": "https://python.langchain.com/docs/integrations/callbacks/argilla",
        "Comet": "https://python.langchain.com/docs/integrations/providers/comet_tracking",
        "Aim": "https://python.langchain.com/docs/integrations/providers/aim_tracking",
        "Weights & Biases": "https://python.langchain.com/docs/integrations/providers/wandb_tracking",
        "SageMaker Tracking": "https://python.langchain.com/docs/integrations/providers/sagemaker_tracking",
        "Rebuff": "https://python.langchain.com/docs/integrations/providers/rebuff",
        "MLflow": "https://python.langchain.com/docs/integrations/providers/mlflow_tracking",
        "Flyte": "https://python.langchain.com/docs/integrations/providers/flyte",
        "Vectara Text Generation": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_text_generation",
        "Natural Language APIs": "https://python.langchain.com/docs/integrations/toolkits/openapi_nla",
        "Predibase": "https://python.langchain.com/docs/integrations/llms/predibase",
        "Eden AI": "https://python.langchain.com/docs/integrations/llms/edenai",
        "Fallbacks": "https://python.langchain.com/docs/guides/fallbacks",
        "Pairwise String Comparison": "https://python.langchain.com/docs/guides/evaluation/comparison/pairwise_string",
        "Criteria Evaluation": "https://python.langchain.com/docs/guides/evaluation/string/criteria_eval_chain",
        "Cookbook": "https://python.langchain.com/docs/guides/expression_language/cookbook",
        "Summarization": "https://python.langchain.com/docs/use_cases/summarization",
        "Extraction": "https://python.langchain.com/docs/use_cases/extraction",
        "Interacting with APIs": "https://python.langchain.com/docs/use_cases/apis",
        "SQL": "https://python.langchain.com/docs/use_cases/sql",
        "QA over Documents": "https://python.langchain.com/docs/use_cases/question_answering/index",
        "Retrieve from vector stores directly": "https://python.langchain.com/docs/use_cases/question_answering/how_to/vector_db_text_generation",
        "Improve document indexing with HyDE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/hyde",
        "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa",
        "Bash chain": "https://python.langchain.com/docs/use_cases/more/code_writing/llm_bash",
        "How to use a SmartLLMChain": "https://python.langchain.com/docs/use_cases/more/self_check/smart_llm",
        "Multi-agent authoritarian speaker selection": "https://python.langchain.com/docs/use_cases/agent_simulations/multiagent_authoritarian",
        "Agent Debates with Tools": "https://python.langchain.com/docs/use_cases/agent_simulations/two_agent_debate_tools",
        "MultiQueryRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/MultiQueryRetriever",
        "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research",
        "Lost in the middle: The problem with long contexts": "https://python.langchain.com/docs/modules/data_connection/document_transformers/post_retrieval/long_context_reorder",
        "How to create a custom Memory class": "https://python.langchain.com/docs/modules/memory/custom_memory",
        "How to add memory to a Multi-Input Chain": "https://python.langchain.com/docs/modules/memory/adding_memory_chain_multiple_inputs",
        "How to add Memory to an LLMChain": "https://python.langchain.com/docs/modules/memory/adding_memory",
        "How to use multiple memory classes in the same chain": "https://python.langchain.com/docs/modules/memory/multiple_memory",
        "How to customize conversational memory": "https://python.langchain.com/docs/modules/memory/conversational_customization",
        "Conversation Knowledge Graph Memory": "https://python.langchain.com/docs/modules/memory/types/kg",
        "Logging to file": "https://python.langchain.com/docs/modules/callbacks/filecallbackhandler",
        "Retry parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/retry",
        "Datetime parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/datetime",
        "Pydantic (JSON) parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/pydantic",
        "Select by maximal marginal relevance (MMR)": "https://python.langchain.com/docs/modules/model_io/prompts/example_selectors/mmr",
        "Select by n-gram overlap": "https://python.langchain.com/docs/modules/model_io/prompts/example_selectors/ngram_overlap",
        "Prompt Pipelining": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/prompts_pipelining",
        "Template Formats": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/formats",
        "Connecting to a Feature Store": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/connecting_to_a_feature_store",
        "Router": "https://python.langchain.com/docs/modules/chains/foundational/router",
        "Transformation": "https://python.langchain.com/docs/modules/chains/foundational/transformation",
        "Custom chain": "https://python.langchain.com/docs/modules/chains/how_to/custom_chain",
        "Async API": "https://python.langchain.com/docs/modules/chains/how_to/async_chain"
    },
    "ElasticSearchBM25Retriever": {
        "ElasticSearch BM25": "https://python.langchain.com/docs/integrations/retrievers/elastic_search_bm25"
    },
    "ZepMemory": {
        "Zep": "https://python.langchain.com/docs/integrations/retrievers/zep_memorystore",
        "Zep Memory": "https://python.langchain.com/docs/integrations/memory/zep_memory"
    },
    "CombinedMemory": {
        "Zep": "https://python.langchain.com/docs/integrations/retrievers/zep_memorystore",
        "How to use multiple memory classes in the same chain": "https://python.langchain.com/docs/modules/memory/multiple_memory"
    },
    "VectorStoreRetrieverMemory": {
        "Zep": "https://python.langchain.com/docs/integrations/retrievers/zep_memorystore"
    },
    "HumanMessage": {
        "Zep": "https://python.langchain.com/docs/integrations/retrievers/zep_memorystore",
        "Zep Memory": "https://python.langchain.com/docs/integrations/memory/zep_memory",
        "AzureML Chat Online Endpoint": "https://python.langchain.com/docs/integrations/chat/azureml_chat_endpoint",
        "Anthropic": "https://python.langchain.com/docs/integrations/chat/anthropic",
        "\ud83d\ude85 LiteLLM": "https://python.langchain.com/docs/integrations/chat/litellm",
        "OpenAI": "https://python.langchain.com/docs/integrations/chat/openai",
        "Google Cloud Platform Vertex AI PaLM ": "https://python.langchain.com/docs/integrations/chat/google_vertex_ai_palm",
        "JinaChat": "https://python.langchain.com/docs/integrations/chat/jinachat",
        "Azure": "https://python.langchain.com/docs/integrations/chat/azure_chat_openai",
        "ERNIE-Bot Chat": "https://python.langchain.com/docs/integrations/chat/ernie",
        "PromptLayer ChatOpenAI": "https://python.langchain.com/docs/integrations/chat/promptlayer_chatopenai",
        "Anyscale": "https://python.langchain.com/docs/integrations/chat/anyscale",
        "Anthropic Functions": "https://python.langchain.com/docs/integrations/chat/anthropic_functions",
        "Context": "https://python.langchain.com/docs/integrations/callbacks/context",
        "Label Studio": "https://python.langchain.com/docs/integrations/callbacks/labelstudio",
        "PromptLayer": "https://python.langchain.com/docs/integrations/callbacks/promptlayer",
        "Log10": "https://python.langchain.com/docs/integrations/providers/log10",
        "MLflow AI Gateway": "https://python.langchain.com/docs/integrations/providers/mlflow_ai_gateway",
        "Flyte": "https://python.langchain.com/docs/integrations/providers/flyte",
        "Arthur": "https://python.langchain.com/docs/integrations/providers/arthur_tracking",
        "Chatbots": "https://python.langchain.com/docs/use_cases/chatbots",
        "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa",
        "CAMEL Role-Playing Autonomous Cooperative Agents": "https://python.langchain.com/docs/use_cases/agent_simulations/camel_role_playing",
        "Multi-Agent Simulated Environment: Petting Zoo": "https://python.langchain.com/docs/use_cases/agent_simulations/petting_zoo",
        "Multi-agent decentralized speaker selection": "https://python.langchain.com/docs/use_cases/agent_simulations/multiagent_bidding",
        "Multi-agent authoritarian speaker selection": "https://python.langchain.com/docs/use_cases/agent_simulations/multiagent_authoritarian",
        "Two-Player Dungeons & Dragons": "https://python.langchain.com/docs/use_cases/agent_simulations/two_player_dnd",
        "Multi-Player Dungeons & Dragons": "https://python.langchain.com/docs/use_cases/agent_simulations/multi_player_dnd",
        "Simulated Environment: Gymnasium": "https://python.langchain.com/docs/use_cases/agent_simulations/gymnasium",
        "Agent Debates with Tools": "https://python.langchain.com/docs/use_cases/agent_simulations/two_agent_debate_tools",
        "Custom callback handlers": "https://python.langchain.com/docs/modules/callbacks/custom_callbacks",
        "Async callbacks": "https://python.langchain.com/docs/modules/callbacks/async_callbacks",
        "Tools as OpenAI Functions": "https://python.langchain.com/docs/modules/agents/tools/tools_as_openai_functions",
        "Prompt Pipelining": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/prompts_pipelining",
        "Using OpenAI functions": "https://python.langchain.com/docs/modules/chains/how_to/openai_functions"
    },
    "AIMessage": {
        "Zep": "https://python.langchain.com/docs/integrations/retrievers/zep_memorystore",
        "Zep Memory": "https://python.langchain.com/docs/integrations/memory/zep_memory",
        "Anthropic": "https://python.langchain.com/docs/integrations/chat/anthropic",
        "\ud83d\ude85 LiteLLM": "https://python.langchain.com/docs/integrations/chat/litellm",
        "OpenAI": "https://python.langchain.com/docs/integrations/chat/openai",
        "JinaChat": "https://python.langchain.com/docs/integrations/chat/jinachat",
        "ERNIE-Bot Chat": "https://python.langchain.com/docs/integrations/chat/ernie",
        "Chatbots": "https://python.langchain.com/docs/use_cases/chatbots",
        "CAMEL Role-Playing Autonomous Cooperative Agents": "https://python.langchain.com/docs/use_cases/agent_simulations/camel_role_playing",
        "Multi-agent decentralized speaker selection": "https://python.langchain.com/docs/use_cases/agent_simulations/multiagent_bidding",
        "Multi-agent authoritarian speaker selection": "https://python.langchain.com/docs/use_cases/agent_simulations/multiagent_authoritarian",
        "Multi-Player Dungeons & Dragons": "https://python.langchain.com/docs/use_cases/agent_simulations/multi_player_dnd",
        "Simulated Environment: Gymnasium": "https://python.langchain.com/docs/use_cases/agent_simulations/gymnasium",
        "Agent Debates with Tools": "https://python.langchain.com/docs/use_cases/agent_simulations/two_agent_debate_tools",
        "Prompt Pipelining": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/prompts_pipelining"
    },
    "ZepRetriever": {
        "Zep": "https://python.langchain.com/docs/integrations/providers/zep",
        "Zep Memory": "https://python.langchain.com/docs/integrations/memory/zep_memory"
    },
    "VespaRetriever": {
        "Vespa": "https://python.langchain.com/docs/integrations/providers/vespa"
    },
    "AmazonKendraRetriever": {
        "Amazon Kendra": "https://python.langchain.com/docs/integrations/retrievers/amazon_kendra_retriever"
    },
    "TextLoader": {
        "Cohere Reranker": "https://python.langchain.com/docs/integrations/retrievers/cohere-reranker",
        "Elasticsearch": "https://python.langchain.com/docs/integrations/vectorstores/elasticsearch",
        "Chat Over Documents with Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_chat",
        "Vectorstore Agent": "https://python.langchain.com/docs/integrations/toolkits/vectorstore",
        "LanceDB": "https://python.langchain.com/docs/integrations/vectorstores/lancedb",
        "Weaviate": "https://python.langchain.com/docs/integrations/vectorstores/weaviate",
        "DashVector": "https://python.langchain.com/docs/integrations/vectorstores/dashvector",
        "ScaNN": "https://python.langchain.com/docs/integrations/vectorstores/scann",
        "Xata": "https://python.langchain.com/docs/integrations/vectorstores/xata",
        "Vectara": "https://python.langchain.com/docs/integrations/vectorstores/vectara",
        "Redis": "https://python.langchain.com/docs/integrations/vectorstores/redis",
        "PGVector": "https://python.langchain.com/docs/integrations/vectorstores/pgvector",
        "Rockset": "https://python.langchain.com/docs/integrations/vectorstores/rockset",
        "Dingo": "https://python.langchain.com/docs/integrations/vectorstores/dingo",
        "Zilliz": "https://python.langchain.com/docs/integrations/vectorstores/zilliz",
        "SingleStoreDB": "https://python.langchain.com/docs/integrations/vectorstores/singlestoredb",
        "Annoy": "https://python.langchain.com/docs/integrations/vectorstores/annoy",
        "Typesense": "https://python.langchain.com/docs/integrations/vectorstores/typesense",
        "Atlas": "https://python.langchain.com/docs/integrations/vectorstores/atlas",
        "Activeloop's Deep Lake": "https://python.langchain.com/docs/integrations/vectorstores/activeloop_deeplake",
        "Tair": "https://python.langchain.com/docs/integrations/vectorstores/tair",
        "Chroma": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
        "Alibaba Cloud OpenSearch": "https://python.langchain.com/docs/integrations/vectorstores/alibabacloud_opensearch",
        "StarRocks": "https://python.langchain.com/docs/integrations/vectorstores/starrocks",
        "Clarifai": "https://python.langchain.com/docs/integrations/vectorstores/clarifai",
        "scikit-learn": "https://python.langchain.com/docs/integrations/vectorstores/sklearn",
        "DocArrayHnswSearch": "https://python.langchain.com/docs/integrations/vectorstores/docarray_hnsw",
        "MyScale": "https://python.langchain.com/docs/integrations/vectorstores/myscale",
        "ClickHouse Vector Search": "https://python.langchain.com/docs/integrations/vectorstores/clickhouse",
        "Qdrant": "https://python.langchain.com/docs/integrations/vectorstores/qdrant",
        "Tigris": "https://python.langchain.com/docs/integrations/vectorstores/tigris",
        "AwaDB": "https://python.langchain.com/docs/integrations/vectorstores/awadb",
        "Supabase (Postgres)": "https://python.langchain.com/docs/integrations/vectorstores/supabase",
        "OpenSearch": "https://python.langchain.com/docs/integrations/vectorstores/opensearch",
        "Pinecone": "https://python.langchain.com/docs/integrations/vectorstores/pinecone",
        "BagelDB": "https://python.langchain.com/docs/integrations/vectorstores/bageldb",
        "Azure Cognitive Search": "https://python.langchain.com/docs/integrations/vectorstores/azuresearch",
        "Cassandra": "https://python.langchain.com/docs/integrations/vectorstores/cassandra",
        "USearch": "https://python.langchain.com/docs/integrations/vectorstores/usearch",
        "Milvus": "https://python.langchain.com/docs/integrations/vectorstores/milvus",
        "Marqo": "https://python.langchain.com/docs/integrations/vectorstores/marqo",
        "DocArrayInMemorySearch": "https://python.langchain.com/docs/integrations/vectorstores/docarray_in_memory",
        "pg_embedding": "https://python.langchain.com/docs/integrations/vectorstores/pgembedding",
        "FAISS": "https://python.langchain.com/docs/integrations/vectorstores/faiss",
        "AnalyticDB": "https://python.langchain.com/docs/integrations/vectorstores/analyticdb",
        "Hologres": "https://python.langchain.com/docs/integrations/vectorstores/hologres",
        "MongoDB Atlas": "https://python.langchain.com/docs/integrations/vectorstores/mongodb_atlas",
        "Meilisearch": "https://python.langchain.com/docs/integrations/vectorstores/meilisearch",
        "Conversational Retrieval Agent": "https://python.langchain.com/docs/use_cases/question_answering/how_to/conversational_retrieval_agents",
        "Analysis of Twitter the-algorithm source code with LangChain, GPT4 and Activeloop's Deep Lake": "https://python.langchain.com/docs/use_cases/question_answering/how_to/code/twitter-the-algorithm-analysis-deeplake",
        "Use LangChain, GPT and Activeloop's Deep Lake to work with code base": "https://python.langchain.com/docs/use_cases/question_answering/how_to/code/code-analysis-deeplake",
        "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa",
        "QA using Activeloop's DeepLake": "https://python.langchain.com/docs/use_cases/question_answering/integrations/semantic-search-over-chat",
        "Graph QA": "https://python.langchain.com/docs/use_cases/more/graph/graph_qa",
        "Caching Embeddings": "https://python.langchain.com/docs/modules/data_connection/caching_embeddings",
        "Parent Document Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/parent_document_retriever",
        "Combine agents and vector stores": "https://python.langchain.com/docs/modules/agents/how_to/agent_vectorstore",
        "Loading from LangChainHub": "https://python.langchain.com/docs/modules/chains/how_to/from_hub"
    },
    "FAISS": {
        "Cohere Reranker": "https://python.langchain.com/docs/integrations/retrievers/cohere-reranker",
        "Document Comparison": "https://python.langchain.com/docs/integrations/toolkits/document_comparison_toolkit",
        "FAISS": "https://python.langchain.com/docs/integrations/vectorstores/faiss",
        "Loading documents from a YouTube url": "https://python.langchain.com/docs/integrations/document_loaders/youtube_audio",
        "AutoGPT": "https://python.langchain.com/docs/use_cases/autonomous_agents/autogpt",
        "BabyAGI User Guide": "https://python.langchain.com/docs/use_cases/agents/baby_agi",
        "BabyAGI with Tools": "https://python.langchain.com/docs/use_cases/agents/baby_agi_with_agent",
        "!pip install bs4": "https://python.langchain.com/docs/use_cases/autonomous_agents/marathon_times",
        "Conversational Retrieval Agent": "https://python.langchain.com/docs/use_cases/question_answering/how_to/conversational_retrieval_agents",
        "Plug-and-Plai": "https://python.langchain.com/docs/use_cases/agents/custom_agent_with_plugin_retrieval_using_plugnplai",
        "Custom Agent with PlugIn Retrieval": "https://python.langchain.com/docs/use_cases/agents/custom_agent_with_plugin_retrieval",
        "Generative Agents in LangChain": "https://python.langchain.com/docs/use_cases/agent_simulations/characters",
        "Caching Embeddings": "https://python.langchain.com/docs/modules/data_connection/caching_embeddings",
        "Ensemble Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/ensemble",
        "Custom agent with tool retrieval": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent_with_tool_retrieval",
        "Select by maximal marginal relevance (MMR)": "https://python.langchain.com/docs/modules/model_io/prompts/example_selectors/mmr"
    },
    "OpenAI": {
        "Cohere Reranker": "https://python.langchain.com/docs/integrations/retrievers/cohere-reranker",
        "Google Serper API": "https://python.langchain.com/docs/integrations/tools/google_serper",
        "Human as a tool": "https://python.langchain.com/docs/integrations/tools/human_tools",
        "OpenWeatherMap API": "https://python.langchain.com/docs/integrations/tools/openweathermap",
        "Search Tools": "https://python.langchain.com/docs/integrations/tools/search_tools",
        "Zapier Natural Language Actions API": "https://python.langchain.com/docs/integrations/tools/zapier",
        "Gradio Tools": "https://python.langchain.com/docs/integrations/tools/gradio_tools",
        "SceneXplain": "https://python.langchain.com/docs/integrations/tools/sceneXplain",
        "Dall-E Image Generator": "https://python.langchain.com/docs/integrations/tools/dalle_image_generator",
        "Entity Memory with SQLite storage": "https://python.langchain.com/docs/integrations/memory/entity_memory_with_sqlite",
        "Streamlit Chat Message History": "https://python.langchain.com/docs/integrations/memory/streamlit_chat_message_history",
        "Label Studio": "https://python.langchain.com/docs/integrations/callbacks/labelstudio",
        "Argilla": "https://python.langchain.com/docs/integrations/callbacks/argilla",
        "PromptLayer": "https://python.langchain.com/docs/integrations/callbacks/promptlayer",
        "Streamlit": "https://python.langchain.com/docs/integrations/callbacks/.ipynb_checkpoints/streamlit-checkpoint",
        "Comet": "https://python.langchain.com/docs/integrations/providers/comet_tracking",
        "Aim": "https://python.langchain.com/docs/integrations/providers/aim_tracking",
        "Weights & Biases": "https://python.langchain.com/docs/integrations/providers/wandb_tracking",
        "SageMaker Tracking": "https://python.langchain.com/docs/integrations/providers/sagemaker_tracking",
        "OpenAI": "https://python.langchain.com/docs/integrations/llms/openai",
        "Rebuff": "https://python.langchain.com/docs/integrations/providers/rebuff",
        "MLflow": "https://python.langchain.com/docs/integrations/providers/mlflow_tracking",
        "Google Serper": "https://python.langchain.com/docs/integrations/providers/google_serper",
        "Helicone": "https://python.langchain.com/docs/integrations/providers/helicone",
        "Shale Protocol": "https://python.langchain.com/docs/integrations/providers/shaleprotocol",
        "WhyLabs": "https://python.langchain.com/docs/integrations/providers/whylabs_profiling",
        "WandB Tracing": "https://python.langchain.com/docs/integrations/providers/wandb_tracing",
        "ClearML": "https://python.langchain.com/docs/integrations/providers/clearml_tracking",
        "Ray Serve": "https://python.langchain.com/docs/integrations/providers/ray_serve",
        "Log, Trace, and Monitor Langchain LLM Calls": "https://python.langchain.com/docs/integrations/providers/portkey/logging_tracing_portkey",
        "Portkey": "https://python.langchain.com/docs/integrations/providers/portkey/index",
        "Chat Over Documents with Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_chat",
        "Vectara Text Generation": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_text_generation",
        "CSV Agent": "https://python.langchain.com/docs/integrations/toolkits/csv",
        "Xorbits Agent": "https://python.langchain.com/docs/integrations/toolkits/xorbits",
        "Jira": "https://python.langchain.com/docs/integrations/toolkits/jira",
        "Spark Dataframe Agent": "https://python.langchain.com/docs/integrations/toolkits/spark",
        "Python Agent": "https://python.langchain.com/docs/integrations/toolkits/python",
        "SQL Database Agent": "https://python.langchain.com/docs/integrations/toolkits/sql_database",
        "Natural Language APIs": "https://python.langchain.com/docs/integrations/toolkits/openapi_nla",
        "JSON Agent": "https://python.langchain.com/docs/integrations/toolkits/json",
        "Github Toolkit": "https://python.langchain.com/docs/integrations/toolkits/github",
        "Pandas Dataframe Agent": "https://python.langchain.com/docs/integrations/toolkits/pandas",
        "OpenAPI agents": "https://python.langchain.com/docs/integrations/toolkits/openapi",
        "Psychic": "https://python.langchain.com/docs/integrations/document_loaders/psychic",
        "Docugami": "https://python.langchain.com/docs/integrations/document_loaders/docugami",
        "Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching",
        "Fallbacks": "https://python.langchain.com/docs/guides/fallbacks",
        "Cookbook": "https://python.langchain.com/docs/guides/expression_language/cookbook",
        "Chatbots": "https://python.langchain.com/docs/use_cases/chatbots",
        "Extraction": "https://python.langchain.com/docs/use_cases/extraction",
        "Interacting with APIs": "https://python.langchain.com/docs/use_cases/apis",
        "SQL": "https://python.langchain.com/docs/use_cases/sql",
        "HuggingGPT": "https://python.langchain.com/docs/use_cases/autonomous_agents/hugginggpt",
        "Perform context-aware text splitting": "https://python.langchain.com/docs/use_cases/question_answering/how_to/document-context-aware-QA",
        "Retrieve from vector stores directly": "https://python.langchain.com/docs/use_cases/question_answering/how_to/vector_db_text_generation",
        "Retrieve as you generate with FLARE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/flare",
        "Improve document indexing with HyDE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/hyde",
        "QA using Activeloop's DeepLake": "https://python.langchain.com/docs/use_cases/question_answering/integrations/semantic-search-over-chat",
        "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/agents/sales_agent_with_context",
        "Graph QA": "https://python.langchain.com/docs/use_cases/more/graph/graph_qa",
        "Tree of Thought (ToT) example": "https://python.langchain.com/docs/use_cases/more/graph/tot",
        "Bash chain": "https://python.langchain.com/docs/use_cases/more/code_writing/llm_bash",
        "LLM Symbolic Math ": "https://python.langchain.com/docs/use_cases/more/code_writing/llm_symbolic_math",
        "Summarization checker chain": "https://python.langchain.com/docs/use_cases/more/self_check/llm_summarization_checker",
        "Self-checking chain": "https://python.langchain.com/docs/use_cases/more/self_check/llm_checker",
        "Agent Debates with Tools": "https://python.langchain.com/docs/use_cases/agent_simulations/two_agent_debate_tools",
        "Weaviate self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/weaviate_self_query",
        "Elasticsearch self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/elasticsearch_self_query",
        "Chroma self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/chroma_self_query",
        "Self-querying with Pinecone": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/pinecone",
        "Self-querying with MyScale": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/myscale_self_query",
        "Deep Lake self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/activeloop_deeplake_self_query",
        "Qdrant self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/qdrant_self_query",
        "Lost in the middle: The problem with long contexts": "https://python.langchain.com/docs/modules/data_connection/document_transformers/post_retrieval/long_context_reorder",
        "How to add memory to a Multi-Input Chain": "https://python.langchain.com/docs/modules/memory/adding_memory_chain_multiple_inputs",
        "How to add Memory to an LLMChain": "https://python.langchain.com/docs/modules/memory/adding_memory",
        "How to use multiple memory classes in the same chain": "https://python.langchain.com/docs/modules/memory/multiple_memory",
        "How to customize conversational memory": "https://python.langchain.com/docs/modules/memory/conversational_customization",
        "Conversation Knowledge Graph Memory": "https://python.langchain.com/docs/modules/memory/types/kg",
        "ConversationTokenBufferMemory": "https://python.langchain.com/docs/modules/memory/types/token_buffer",
        "ConversationSummaryBufferMemory": "https://python.langchain.com/docs/modules/memory/types/summary_buffer",
        "Multiple callback handlers": "https://python.langchain.com/docs/modules/callbacks/multiple_callbacks",
        "Token counting": "https://python.langchain.com/docs/modules/callbacks/token_counting",
        "Logging to file": "https://python.langchain.com/docs/modules/callbacks/filecallbackhandler",
        "Multi-Input Tools": "https://python.langchain.com/docs/modules/agents/tools/multi_input_tool",
        "Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools",
        "Tool Input Schema": "https://python.langchain.com/docs/modules/agents/tools/tool_input_validation",
        "Human-in-the-loop Tool Validation": "https://python.langchain.com/docs/modules/agents/tools/human_approval",
        "Combine agents and vector stores": "https://python.langchain.com/docs/modules/agents/how_to/agent_vectorstore",
        "Access intermediate steps": "https://python.langchain.com/docs/modules/agents/how_to/intermediate_steps",
        "Timeouts for agents": "https://python.langchain.com/docs/modules/agents/how_to/max_time_limit",
        "Streaming final agent output": "https://python.langchain.com/docs/modules/agents/how_to/streaming_stdout_final_only",
        "Cap the max number of iterations": "https://python.langchain.com/docs/modules/agents/how_to/max_iterations",
        "Async API": "https://python.langchain.com/docs/modules/chains/how_to/async_chain",
        "Tracking token usage": "https://python.langchain.com/docs/modules/model_io/models/llms/token_usage_tracking",
        "Serialization": "https://python.langchain.com/docs/modules/model_io/models/llms/llm_serialization",
        "Retry parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/retry",
        "Datetime parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/datetime",
        "Pydantic (JSON) parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/pydantic",
        "Router": "https://python.langchain.com/docs/modules/chains/foundational/router",
        "Transformation": "https://python.langchain.com/docs/modules/chains/foundational/transformation"
    },
    "ContextualCompressionRetriever": {
        "Cohere Reranker": "https://python.langchain.com/docs/integrations/retrievers/cohere-reranker",
        "LOTR (Merger Retriever)": "https://python.langchain.com/docs/integrations/retrievers/merger_retriever"
    },
    "CohereRerank": {
        "Cohere Reranker": "https://python.langchain.com/docs/integrations/retrievers/cohere-reranker",
        "Cohere": "https://python.langchain.com/docs/integrations/providers/cohere"
    },
    "RetrievalQA": {
        "Cohere Reranker": "https://python.langchain.com/docs/integrations/retrievers/cohere-reranker",
        "Document Comparison": "https://python.langchain.com/docs/integrations/toolkits/document_comparison_toolkit",
        "ScaNN": "https://python.langchain.com/docs/integrations/vectorstores/scann",
        "Activeloop's Deep Lake": "https://python.langchain.com/docs/integrations/vectorstores/activeloop_deeplake",
        "StarRocks": "https://python.langchain.com/docs/integrations/vectorstores/starrocks",
        "Loading documents from a YouTube url": "https://python.langchain.com/docs/integrations/document_loaders/youtube_audio",
        "Docugami": "https://python.langchain.com/docs/integrations/document_loaders/docugami",
        "Ollama": "https://python.langchain.com/docs/integrations/llms/ollama",
        "QA over Documents": "https://python.langchain.com/docs/use_cases/question_answering/index",
        "Perform context-aware text splitting": "https://python.langchain.com/docs/use_cases/question_answering/how_to/document-context-aware-QA",
        "Use local LLMs": "https://python.langchain.com/docs/use_cases/question_answering/how_to/local_retrieval_qa",
        "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa",
        "QA using Activeloop's DeepLake": "https://python.langchain.com/docs/use_cases/question_answering/integrations/semantic-search-over-chat",
        "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/agents/sales_agent_with_context",
        "Combine agents and vector stores": "https://python.langchain.com/docs/modules/agents/how_to/agent_vectorstore"
    },
    "KNNRetriever": {
        "kNN": "https://python.langchain.com/docs/integrations/retrievers/knn"
    },
    "WikipediaRetriever": {
        "Wikipedia": "https://python.langchain.com/docs/integrations/providers/wikipedia"
    },
    "ConversationalRetrievalChain": {
        "Wikipedia": "https://python.langchain.com/docs/integrations/retrievers/wikipedia",
        "Arxiv": "https://python.langchain.com/docs/integrations/retrievers/arxiv",
        "Chat Over Documents with Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_chat",
        "Chatbots": "https://python.langchain.com/docs/use_cases/chatbots",
        "Code Understanding": "https://python.langchain.com/docs/use_cases/code_understanding",
        "QA over Documents": "https://python.langchain.com/docs/use_cases/question_answering/index",
        "Analysis of Twitter the-algorithm source code with LangChain, GPT4 and Activeloop's Deep Lake": "https://python.langchain.com/docs/use_cases/question_answering/how_to/code/twitter-the-algorithm-analysis-deeplake",
        "Use LangChain, GPT and Activeloop's Deep Lake to work with code base": "https://python.langchain.com/docs/use_cases/question_answering/how_to/code/code-analysis-deeplake",
        "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa",
        "QA using Activeloop's DeepLake": "https://python.langchain.com/docs/use_cases/question_answering/integrations/semantic-search-over-chat"
    },
    "MetalRetriever": {
        "Metal": "https://python.langchain.com/docs/integrations/providers/metal"
    },
    "CSVLoader": {
        "ChatGPT Plugin": "https://python.langchain.com/docs/integrations/retrievers/chatgpt-plugin",
        "CSV": "https://python.langchain.com/docs/integrations/document_loaders/csv"
    },
    "Document": {
        "ChatGPT Plugin": "https://python.langchain.com/docs/integrations/retrievers/chatgpt-plugin",
        "Weaviate Hybrid Search": "https://python.langchain.com/docs/integrations/retrievers/weaviate-hybrid",
        "BM25": "https://python.langchain.com/docs/integrations/retrievers/bm25",
        "TF-IDF": "https://python.langchain.com/docs/integrations/retrievers/tf_idf",
        "Apify": "https://python.langchain.com/docs/integrations/tools/apify",
        "Vectara Text Generation": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_text_generation",
        "PGVector": "https://python.langchain.com/docs/integrations/vectorstores/pgvector",
        "Annoy": "https://python.langchain.com/docs/integrations/vectorstores/annoy",
        "pg_embedding": "https://python.langchain.com/docs/integrations/vectorstores/pgembedding",
        "FAISS": "https://python.langchain.com/docs/integrations/vectorstores/faiss",
        "Nuclia Understanding API document transformer": "https://python.langchain.com/docs/integrations/document_transformers/nuclia_transformer",
        "OpenAI Functions Metadata Tagger": "https://python.langchain.com/docs/integrations/document_transformers/openai_metadata_tagger",
        "Doctran Extract Properties": "https://python.langchain.com/docs/integrations/document_transformers/doctran_extract_properties",
        "Doctran Interrogate Documents": "https://python.langchain.com/docs/integrations/document_transformers/doctran_interrogate_document",
        "Doctran Translate Documents": "https://python.langchain.com/docs/integrations/document_transformers/doctran_translate_document",
        "TensorFlow Datasets": "https://python.langchain.com/docs/integrations/document_loaders/tensorflow_datasets",
        "Airbyte Salesforce": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_salesforce",
        "Airbyte CDK": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_cdk",
        "Airbyte Stripe": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_stripe",
        "Copy Paste": "https://python.langchain.com/docs/integrations/document_loaders/copypaste",
        "Airbyte Typeform": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_typeform",
        "Apify Dataset": "https://python.langchain.com/docs/integrations/document_loaders/apify_dataset",
        "Docugami": "https://python.langchain.com/docs/integrations/document_loaders/docugami",
        "Airbyte Hubspot": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_hubspot",
        "Airbyte Gong": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_gong",
        "Airbyte Shopify": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_shopify",
        "Airbyte Zendesk Support": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_zendesk_support",
        "SageMakerEndpoint": "https://python.langchain.com/docs/integrations/llms/sagemaker",
        "Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching",
        "!pip install bs4": "https://python.langchain.com/docs/use_cases/autonomous_agents/marathon_times",
        "Retrieve from vector stores directly": "https://python.langchain.com/docs/use_cases/question_answering/how_to/vector_db_text_generation",
        "Multiple Retrieval Sources": "https://python.langchain.com/docs/use_cases/question_answering/how_to/multiple_retrieval",
        "Retrieve as you generate with FLARE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/flare",
        "Plug-and-Plai": "https://python.langchain.com/docs/use_cases/agents/custom_agent_with_plugin_retrieval_using_plugnplai",
        "Custom Agent with PlugIn Retrieval": "https://python.langchain.com/docs/use_cases/agents/custom_agent_with_plugin_retrieval",
        "Weaviate self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/weaviate_self_query",
        "Elasticsearch self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/elasticsearch_self_query",
        "Chroma self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/chroma_self_query",
        "Self-querying with Pinecone": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/pinecone",
        "Self-querying with MyScale": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/myscale_self_query",
        "Deep Lake self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/activeloop_deeplake_self_query",
        "Qdrant self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/qdrant_self_query",
        "How to add memory to a Multi-Input Chain": "https://python.langchain.com/docs/modules/memory/adding_memory_chain_multiple_inputs",
        "Custom agent with tool retrieval": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent_with_tool_retrieval"
    },
    "ChatGPTPluginRetriever": {
        "ChatGPT Plugin": "https://python.langchain.com/docs/integrations/retrievers/chatgpt-plugin",
        "OpenAI": "https://python.langchain.com/docs/integrations/providers/openai"
    },
    "GoogleCloudEnterpriseSearchRetriever": {
        "Google Cloud Enterprise Search": "https://python.langchain.com/docs/integrations/retrievers/google_cloud_enterprise_search"
    },
    "DocArrayRetriever": {
        "DocArray Retriever": "https://python.langchain.com/docs/integrations/retrievers/docarray_retriever"
    },
    "SVMRetriever": {
        "SVM": "https://python.langchain.com/docs/integrations/retrievers/svm",
        "QA over Documents": "https://python.langchain.com/docs/use_cases/question_answering/index"
    },
    "PineconeHybridSearchRetriever": {
        "Pinecone Hybrid Search": "https://python.langchain.com/docs/integrations/retrievers/pinecone_hybrid_search"
    },
    "PubMedRetriever": {
        "PubMed": "https://python.langchain.com/docs/integrations/providers/pubmed"
    },
    "WeaviateHybridSearchRetriever": {
        "Weaviate Hybrid Search": "https://python.langchain.com/docs/integrations/retrievers/weaviate-hybrid"
    },
    "ArxivRetriever": {
        "Arxiv": "https://python.langchain.com/docs/integrations/providers/arxiv"
    },
    "BM25Retriever": {
        "BM25": "https://python.langchain.com/docs/integrations/retrievers/bm25",
        "Ensemble Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/ensemble"
    },
    "AzureCognitiveSearchRetriever": {
        "Azure Cognitive Search": "https://python.langchain.com/docs/integrations/providers/azure_cognitive_search_"
    },
    "ChaindeskRetriever": {
        "Chaindesk": "https://python.langchain.com/docs/integrations/providers/chaindesk"
    },
    "MergerRetriever": {
        "LOTR (Merger Retriever)": "https://python.langchain.com/docs/integrations/retrievers/merger_retriever"
    },
    "EmbeddingsRedundantFilter": {
        "LOTR (Merger Retriever)": "https://python.langchain.com/docs/integrations/retrievers/merger_retriever"
    },
    "EmbeddingsClusteringFilter": {
        "LOTR (Merger Retriever)": "https://python.langchain.com/docs/integrations/retrievers/merger_retriever"
    },
    "DocumentCompressorPipeline": {
        "LOTR (Merger Retriever)": "https://python.langchain.com/docs/integrations/retrievers/merger_retriever"
    },
    "LongContextReorder": {
        "LOTR (Merger Retriever)": "https://python.langchain.com/docs/integrations/retrievers/merger_retriever",
        "Lost in the middle: The problem with long contexts": "https://python.langchain.com/docs/modules/data_connection/document_transformers/post_retrieval/long_context_reorder"
    },
    "TFIDFRetriever": {
        "TF-IDF": "https://python.langchain.com/docs/integrations/retrievers/tf_idf"
    },
    "load_tools": {
        "ChatGPT Plugins": "https://python.langchain.com/docs/integrations/tools/chatgpt_plugins",
        "Human as a tool": "https://python.langchain.com/docs/integrations/tools/human_tools",
        "AWS Lambda API": "https://python.langchain.com/docs/integrations/tools/awslambda",
        "Requests": "https://python.langchain.com/docs/integrations/tools/requests",
        "OpenWeatherMap API": "https://python.langchain.com/docs/integrations/tools/openweathermap",
        "Search Tools": "https://python.langchain.com/docs/integrations/tools/search_tools",
        "ArXiv API Tool": "https://python.langchain.com/docs/integrations/tools/arxiv",
        "GraphQL tool": "https://python.langchain.com/docs/integrations/tools/graphql",
        "SceneXplain": "https://python.langchain.com/docs/integrations/tools/sceneXplain",
        "Dall-E Image Generator": "https://python.langchain.com/docs/integrations/tools/dalle_image_generator",
        "Argilla": "https://python.langchain.com/docs/integrations/callbacks/argilla",
        "Streamlit": "https://python.langchain.com/docs/integrations/callbacks/.ipynb_checkpoints/streamlit-checkpoint",
        "SerpAPI": "https://python.langchain.com/docs/integrations/providers/serpapi",
        "Comet": "https://python.langchain.com/docs/integrations/providers/comet_tracking",
        "Aim": "https://python.langchain.com/docs/integrations/providers/aim_tracking",
        "Golden": "https://python.langchain.com/docs/integrations/providers/golden",
        "Weights & Biases": "https://python.langchain.com/docs/integrations/providers/wandb_tracking",
        "SageMaker Tracking": "https://python.langchain.com/docs/integrations/providers/sagemaker_tracking",
        "Wolfram Alpha": "https://python.langchain.com/docs/integrations/providers/wolfram_alpha",
        "MLflow": "https://python.langchain.com/docs/integrations/providers/mlflow_tracking",
        "DataForSEO": "https://python.langchain.com/docs/integrations/providers/dataforseo",
        "SearxNG Search API": "https://python.langchain.com/docs/integrations/providers/searx",
        "Google Serper": "https://python.langchain.com/docs/integrations/providers/google_serper",
        "OpenWeatherMap": "https://python.langchain.com/docs/integrations/providers/openweathermap",
        "Flyte": "https://python.langchain.com/docs/integrations/providers/flyte",
        "WandB Tracing": "https://python.langchain.com/docs/integrations/providers/wandb_tracing",
        "ClearML": "https://python.langchain.com/docs/integrations/providers/clearml_tracking",
        "Google Search": "https://python.langchain.com/docs/integrations/providers/google_search",
        "Log, Trace, and Monitor Langchain LLM Calls": "https://python.langchain.com/docs/integrations/providers/portkey/logging_tracing_portkey",
        "Portkey": "https://python.langchain.com/docs/integrations/providers/portkey/index",
        "NIBittensorLLM": "https://python.langchain.com/docs/integrations/llms/bittensor",
        "Amazon API Gateway": "https://python.langchain.com/docs/integrations/llms/amazon_api_gateway_example",
        "Debugging": "https://python.langchain.com/docs/guides/debugging",
        "LangSmith Walkthrough": "https://python.langchain.com/docs/guides/langsmith/walkthrough",
        "Agent Debates with Tools": "https://python.langchain.com/docs/use_cases/agent_simulations/two_agent_debate_tools",
        "Multiple callback handlers": "https://python.langchain.com/docs/modules/callbacks/multiple_callbacks",
        "Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools",
        "Human-in-the-loop Tool Validation": "https://python.langchain.com/docs/modules/agents/tools/human_approval",
        "Access intermediate steps": "https://python.langchain.com/docs/modules/agents/how_to/intermediate_steps",
        "Timeouts for agents": "https://python.langchain.com/docs/modules/agents/how_to/max_time_limit",
        "Streaming final agent output": "https://python.langchain.com/docs/modules/agents/how_to/streaming_stdout_final_only",
        "Cap the max number of iterations": "https://python.langchain.com/docs/modules/agents/how_to/max_iterations",
        "Async API": "https://python.langchain.com/docs/modules/agents/how_to/async_agent",
        "Human input Chat Model": "https://python.langchain.com/docs/modules/model_io/models/chat/human_input_chat_model",
        "Fake LLM": "https://python.langchain.com/docs/modules/model_io/models/llms/fake_llm",
        "Tracking token usage": "https://python.langchain.com/docs/modules/model_io/models/llms/token_usage_tracking",
        "Human input LLM": "https://python.langchain.com/docs/modules/model_io/models/llms/human_input_llm"
    },
    "initialize_agent": {
        "ChatGPT Plugins": "https://python.langchain.com/docs/integrations/tools/chatgpt_plugins",
        "Google Serper API": "https://python.langchain.com/docs/integrations/tools/google_serper",
        "Human as a tool": "https://python.langchain.com/docs/integrations/tools/human_tools",
        "AWS Lambda API": "https://python.langchain.com/docs/integrations/tools/awslambda",
        "OpenWeatherMap API": "https://python.langchain.com/docs/integrations/tools/openweathermap",
        "Search Tools": "https://python.langchain.com/docs/integrations/tools/search_tools",
        "Zapier Natural Language Actions API": "https://python.langchain.com/docs/integrations/tools/zapier",
        "ArXiv API Tool": "https://python.langchain.com/docs/integrations/tools/arxiv",
        "Metaphor Search": "https://python.langchain.com/docs/integrations/tools/metaphor_search",
        "GraphQL tool": "https://python.langchain.com/docs/integrations/tools/graphql",
        "Gradio Tools": "https://python.langchain.com/docs/integrations/tools/gradio_tools",
        "SceneXplain": "https://python.langchain.com/docs/integrations/tools/sceneXplain",
        "Dall-E Image Generator": "https://python.langchain.com/docs/integrations/tools/dalle_image_generator",
        "Shell Tool": "https://python.langchain.com/docs/integrations/tools/bash",
        "Zep Memory": "https://python.langchain.com/docs/integrations/memory/zep_memory",
        "Dynamodb Chat Message History": "https://python.langchain.com/docs/integrations/memory/dynamodb_chat_message_history",
        "Argilla": "https://python.langchain.com/docs/integrations/callbacks/argilla",
        "Streamlit": "https://python.langchain.com/docs/integrations/callbacks/.ipynb_checkpoints/streamlit-checkpoint",
        "Comet": "https://python.langchain.com/docs/integrations/providers/comet_tracking",
        "Aim": "https://python.langchain.com/docs/integrations/providers/aim_tracking",
        "Weights & Biases": "https://python.langchain.com/docs/integrations/providers/wandb_tracking",
        "SageMaker Tracking": "https://python.langchain.com/docs/integrations/providers/sagemaker_tracking",
        "MLflow": "https://python.langchain.com/docs/integrations/providers/mlflow_tracking",
        "Google Serper": "https://python.langchain.com/docs/integrations/providers/google_serper",
        "Flyte": "https://python.langchain.com/docs/integrations/providers/flyte",
        "WandB Tracing": "https://python.langchain.com/docs/integrations/providers/wandb_tracing",
        "ClearML": "https://python.langchain.com/docs/integrations/providers/clearml_tracking",
        "Log, Trace, and Monitor Langchain LLM Calls": "https://python.langchain.com/docs/integrations/providers/portkey/logging_tracing_portkey",
        "Portkey": "https://python.langchain.com/docs/integrations/providers/portkey/index",
        "Jira": "https://python.langchain.com/docs/integrations/toolkits/jira",
        "Document Comparison": "https://python.langchain.com/docs/integrations/toolkits/document_comparison_toolkit",
        "Azure Cognitive Services Toolkit": "https://python.langchain.com/docs/integrations/toolkits/azure_cognitive_services",
        "Natural Language APIs": "https://python.langchain.com/docs/integrations/toolkits/openapi_nla",
        "Gmail Toolkit": "https://python.langchain.com/docs/integrations/toolkits/gmail",
        "Github Toolkit": "https://python.langchain.com/docs/integrations/toolkits/github",
        "PlayWright Browser Toolkit": "https://python.langchain.com/docs/integrations/toolkits/playwright",
        "Office365 Toolkit": "https://python.langchain.com/docs/integrations/toolkits/office365",
        "MultiOn Toolkit": "https://python.langchain.com/docs/integrations/toolkits/multion",
        "Amadeus Toolkit": "https://python.langchain.com/docs/integrations/toolkits/amadeus",
        "NIBittensorLLM": "https://python.langchain.com/docs/integrations/llms/bittensor",
        "Amazon API Gateway": "https://python.langchain.com/docs/integrations/llms/amazon_api_gateway_example",
        "Debugging": "https://python.langchain.com/docs/guides/debugging",
        "LangSmith Walkthrough": "https://python.langchain.com/docs/guides/langsmith/walkthrough",
        "Comparing Chain Outputs": "https://python.langchain.com/docs/guides/evaluation/examples/comparisons",
        "Agent Trajectory": "https://python.langchain.com/docs/guides/evaluation/trajectory/trajectory_eval",
        "Multi-modal outputs: Image & Text": "https://python.langchain.com/docs/use_cases/multi_modal/image_agent",
        "Agent Debates with Tools": "https://python.langchain.com/docs/use_cases/agent_simulations/two_agent_debate_tools",
        "Multiple callback handlers": "https://python.langchain.com/docs/modules/callbacks/multiple_callbacks",
        "Multi-Input Tools": "https://python.langchain.com/docs/modules/agents/tools/multi_input_tool",
        "Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools",
        "Tool Input Schema": "https://python.langchain.com/docs/modules/agents/tools/tool_input_validation",
        "Human-in-the-loop Tool Validation": "https://python.langchain.com/docs/modules/agents/tools/human_approval",
        "Self ask with search": "https://python.langchain.com/docs/modules/agents/agent_types/self_ask_with_search",
        "ReAct document store": "https://python.langchain.com/docs/modules/agents/agent_types/react_docstore",
        "OpenAI Multi Functions Agent": "https://python.langchain.com/docs/modules/agents/agent_types/openai_multi_functions_agent",
        "Combine agents and vector stores": "https://python.langchain.com/docs/modules/agents/how_to/agent_vectorstore",
        "Access intermediate steps": "https://python.langchain.com/docs/modules/agents/how_to/intermediate_steps",
        "Handle parsing errors": "https://python.langchain.com/docs/modules/agents/how_to/handle_parsing_errors",
        "Running Agent as an Iterator": "https://python.langchain.com/docs/modules/agents/how_to/agent_iter",
        "Timeouts for agents": "https://python.langchain.com/docs/modules/agents/how_to/max_time_limit",
        "Streaming final agent output": "https://python.langchain.com/docs/modules/agents/how_to/streaming_stdout_final_only",
        "Add Memory to OpenAI Functions Agent": "https://python.langchain.com/docs/modules/agents/how_to/add_memory_openai_functions",
        "Cap the max number of iterations": "https://python.langchain.com/docs/modules/agents/how_to/max_iterations",
        "Custom functions with OpenAI Functions Agent": "https://python.langchain.com/docs/modules/agents/how_to/custom-functions-with-openai-functions-agent",
        "Async API": "https://python.langchain.com/docs/modules/agents/how_to/async_agent",
        "Use ToolKits with OpenAI Functions": "https://python.langchain.com/docs/modules/agents/how_to/use_toolkits_with_openai_functions",
        "Human input Chat Model": "https://python.langchain.com/docs/modules/model_io/models/chat/human_input_chat_model",
        "Fake LLM": "https://python.langchain.com/docs/modules/model_io/models/llms/fake_llm",
        "Tracking token usage": "https://python.langchain.com/docs/modules/model_io/models/llms/token_usage_tracking",
        "Human input LLM": "https://python.langchain.com/docs/modules/model_io/models/llms/human_input_llm"
    },
    "AgentType": {
        "ChatGPT Plugins": "https://python.langchain.com/docs/integrations/tools/chatgpt_plugins",
        "Google Serper API": "https://python.langchain.com/docs/integrations/tools/google_serper",
        "Human as a tool": "https://python.langchain.com/docs/integrations/tools/human_tools",
        "AWS Lambda API": "https://python.langchain.com/docs/integrations/tools/awslambda",
        "OpenWeatherMap API": "https://python.langchain.com/docs/integrations/tools/openweathermap",
        "Search Tools": "https://python.langchain.com/docs/integrations/tools/search_tools",
        "Zapier Natural Language Actions API": "https://python.langchain.com/docs/integrations/tools/zapier",
        "ArXiv API Tool": "https://python.langchain.com/docs/integrations/tools/arxiv",
        "Metaphor Search": "https://python.langchain.com/docs/integrations/tools/metaphor_search",
        "GraphQL tool": "https://python.langchain.com/docs/integrations/tools/graphql",
        "Shell Tool": "https://python.langchain.com/docs/integrations/tools/bash",
        "Zep Memory": "https://python.langchain.com/docs/integrations/memory/zep_memory",
        "Dynamodb Chat Message History": "https://python.langchain.com/docs/integrations/memory/dynamodb_chat_message_history",
        "Argilla": "https://python.langchain.com/docs/integrations/callbacks/argilla",
        "Streamlit": "https://python.langchain.com/docs/integrations/callbacks/.ipynb_checkpoints/streamlit-checkpoint",
        "Aim": "https://python.langchain.com/docs/integrations/providers/aim_tracking",
        "Weights & Biases": "https://python.langchain.com/docs/integrations/providers/wandb_tracking",
        "MLflow": "https://python.langchain.com/docs/integrations/providers/mlflow_tracking",
        "Google Serper": "https://python.langchain.com/docs/integrations/providers/google_serper",
        "Flyte": "https://python.langchain.com/docs/integrations/providers/flyte",
        "WandB Tracing": "https://python.langchain.com/docs/integrations/providers/wandb_tracing",
        "ClearML": "https://python.langchain.com/docs/integrations/providers/clearml_tracking",
        "Log, Trace, and Monitor Langchain LLM Calls": "https://python.langchain.com/docs/integrations/providers/portkey/logging_tracing_portkey",
        "Portkey": "https://python.langchain.com/docs/integrations/providers/portkey/index",
        "CSV Agent": "https://python.langchain.com/docs/integrations/toolkits/csv",
        "Jira": "https://python.langchain.com/docs/integrations/toolkits/jira",
        "Document Comparison": "https://python.langchain.com/docs/integrations/toolkits/document_comparison_toolkit",
        "Python Agent": "https://python.langchain.com/docs/integrations/toolkits/python",
        "Azure Cognitive Services Toolkit": "https://python.langchain.com/docs/integrations/toolkits/azure_cognitive_services",
        "SQL Database Agent": "https://python.langchain.com/docs/integrations/toolkits/sql_database",
        "Natural Language APIs": "https://python.langchain.com/docs/integrations/toolkits/openapi_nla",
        "Gmail Toolkit": "https://python.langchain.com/docs/integrations/toolkits/gmail",
        "Github Toolkit": "https://python.langchain.com/docs/integrations/toolkits/github",
        "PlayWright Browser Toolkit": "https://python.langchain.com/docs/integrations/toolkits/playwright",
        "Office365 Toolkit": "https://python.langchain.com/docs/integrations/toolkits/office365",
        "Pandas Dataframe Agent": "https://python.langchain.com/docs/integrations/toolkits/pandas",
        "MultiOn Toolkit": "https://python.langchain.com/docs/integrations/toolkits/multion",
        "Amadeus Toolkit": "https://python.langchain.com/docs/integrations/toolkits/amadeus",
        "NIBittensorLLM": "https://python.langchain.com/docs/integrations/llms/bittensor",
        "Amazon API Gateway": "https://python.langchain.com/docs/integrations/llms/amazon_api_gateway_example",
        "Debugging": "https://python.langchain.com/docs/guides/debugging",
        "LangSmith Walkthrough": "https://python.langchain.com/docs/guides/langsmith/walkthrough",
        "Comparing Chain Outputs": "https://python.langchain.com/docs/guides/evaluation/examples/comparisons",
        "Agent Trajectory": "https://python.langchain.com/docs/guides/evaluation/trajectory/trajectory_eval",
        "SQL": "https://python.langchain.com/docs/use_cases/sql",
        "Multi-modal outputs: Image & Text": "https://python.langchain.com/docs/use_cases/multi_modal/image_agent",
        "Agent Debates with Tools": "https://python.langchain.com/docs/use_cases/agent_simulations/two_agent_debate_tools",
        "Multiple callback handlers": "https://python.langchain.com/docs/modules/callbacks/multiple_callbacks",
        "Multi-Input Tools": "https://python.langchain.com/docs/modules/agents/tools/multi_input_tool",
        "Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools",
        "Tool Input Schema": "https://python.langchain.com/docs/modules/agents/tools/tool_input_validation",
        "Human-in-the-loop Tool Validation": "https://python.langchain.com/docs/modules/agents/tools/human_approval",
        "Self ask with search": "https://python.langchain.com/docs/modules/agents/agent_types/self_ask_with_search",
        "ReAct document store": "https://python.langchain.com/docs/modules/agents/agent_types/react_docstore",
        "OpenAI Multi Functions Agent": "https://python.langchain.com/docs/modules/agents/agent_types/openai_multi_functions_agent",
        "Combine agents and vector stores": "https://python.langchain.com/docs/modules/agents/how_to/agent_vectorstore",
        "Access intermediate steps": "https://python.langchain.com/docs/modules/agents/how_to/intermediate_steps",
        "Handle parsing errors": "https://python.langchain.com/docs/modules/agents/how_to/handle_parsing_errors",
        "Running Agent as an Iterator": "https://python.langchain.com/docs/modules/agents/how_to/agent_iter",
        "Timeouts for agents": "https://python.langchain.com/docs/modules/agents/how_to/max_time_limit",
        "Streaming final agent output": "https://python.langchain.com/docs/modules/agents/how_to/streaming_stdout_final_only",
        "Add Memory to OpenAI Functions Agent": "https://python.langchain.com/docs/modules/agents/how_to/add_memory_openai_functions",
        "Cap the max number of iterations": "https://python.langchain.com/docs/modules/agents/how_to/max_iterations",
        "Custom functions with OpenAI Functions Agent": "https://python.langchain.com/docs/modules/agents/how_to/custom-functions-with-openai-functions-agent",
        "Async API": "https://python.langchain.com/docs/modules/agents/how_to/async_agent",
        "Use ToolKits with OpenAI Functions": "https://python.langchain.com/docs/modules/agents/how_to/use_toolkits_with_openai_functions",
        "Human input Chat Model": "https://python.langchain.com/docs/modules/model_io/models/chat/human_input_chat_model",
        "Fake LLM": "https://python.langchain.com/docs/modules/model_io/models/llms/fake_llm",
        "Tracking token usage": "https://python.langchain.com/docs/modules/model_io/models/llms/token_usage_tracking",
        "Human input LLM": "https://python.langchain.com/docs/modules/model_io/models/llms/human_input_llm"
    },
    "AIPluginTool": {
        "ChatGPT Plugins": "https://python.langchain.com/docs/integrations/tools/chatgpt_plugins"
    },
    "DataForSeoAPIWrapper": {
        "DataForSeo API Wrapper": "https://python.langchain.com/docs/integrations/tools/dataforseo",
        "DataForSEO": "https://python.langchain.com/docs/integrations/providers/dataforseo"
    },
    "Tool": {
        "DataForSeo API Wrapper": "https://python.langchain.com/docs/integrations/tools/dataforseo",
        "Google Serper API": "https://python.langchain.com/docs/integrations/tools/google_serper",
        "SerpAPI": "https://python.langchain.com/docs/integrations/tools/serpapi",
        "Google Search": "https://python.langchain.com/docs/integrations/tools/google_search",
        "Zep Memory": "https://python.langchain.com/docs/integrations/memory/zep_memory",
        "Dynamodb Chat Message History": "https://python.langchain.com/docs/integrations/memory/dynamodb_chat_message_history",
        "SageMaker Tracking": "https://python.langchain.com/docs/integrations/providers/sagemaker_tracking",
        "Google Serper": "https://python.langchain.com/docs/integrations/providers/google_serper",
        "Document Comparison": "https://python.langchain.com/docs/integrations/toolkits/document_comparison_toolkit",
        "Natural Language APIs": "https://python.langchain.com/docs/integrations/toolkits/openapi_nla",
        "Github Toolkit": "https://python.langchain.com/docs/integrations/toolkits/github",
        "NIBittensorLLM": "https://python.langchain.com/docs/integrations/llms/bittensor",
        "Comparing Chain Outputs": "https://python.langchain.com/docs/guides/evaluation/examples/comparisons",
        "AutoGPT": "https://python.langchain.com/docs/use_cases/autonomous_agents/autogpt",
        "BabyAGI with Tools": "https://python.langchain.com/docs/use_cases/agents/baby_agi_with_agent",
        "Plug-and-Plai": "https://python.langchain.com/docs/use_cases/agents/custom_agent_with_plugin_retrieval_using_plugnplai",
        "Wikibase Agent": "https://python.langchain.com/docs/use_cases/agents/wikibase_agent",
        "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/agents/sales_agent_with_context",
        "Custom Agent with PlugIn Retrieval": "https://python.langchain.com/docs/use_cases/agents/custom_agent_with_plugin_retrieval",
        "Agent Debates with Tools": "https://python.langchain.com/docs/use_cases/agent_simulations/two_agent_debate_tools",
        "Adding Message Memory backed by a database to an Agent": "https://python.langchain.com/docs/modules/memory/agent_with_memory_in_db",
        "How to add Memory to an Agent": "https://python.langchain.com/docs/modules/memory/agent_with_memory",
        "Multi-Input Tools": "https://python.langchain.com/docs/modules/agents/tools/multi_input_tool",
        "Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools",
        "Self ask with search": "https://python.langchain.com/docs/modules/agents/agent_types/self_ask_with_search",
        "ReAct document store": "https://python.langchain.com/docs/modules/agents/agent_types/react_docstore",
        "OpenAI Multi Functions Agent": "https://python.langchain.com/docs/modules/agents/agent_types/openai_multi_functions_agent",
        "Combine agents and vector stores": "https://python.langchain.com/docs/modules/agents/how_to/agent_vectorstore",
        "Custom MRKL agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_mrkl_agent",
        "Handle parsing errors": "https://python.langchain.com/docs/modules/agents/how_to/handle_parsing_errors",
        "Shared memory across agents and tools": "https://python.langchain.com/docs/modules/agents/how_to/sharedmemory_for_tools",
        "Custom multi-action agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_multi_action_agent",
        "Running Agent as an Iterator": "https://python.langchain.com/docs/modules/agents/how_to/agent_iter",
        "Timeouts for agents": "https://python.langchain.com/docs/modules/agents/how_to/max_time_limit",
        "Add Memory to OpenAI Functions Agent": "https://python.langchain.com/docs/modules/agents/how_to/add_memory_openai_functions",
        "Cap the max number of iterations": "https://python.langchain.com/docs/modules/agents/how_to/max_iterations",
        "Custom agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent",
        "Use ToolKits with OpenAI Functions": "https://python.langchain.com/docs/modules/agents/how_to/use_toolkits_with_openai_functions",
        "Custom agent with tool retrieval": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent_with_tool_retrieval"
    },
    "SearxSearchWrapper": {
        "SearxNG Search API": "https://python.langchain.com/docs/integrations/providers/searx"
    },
    "GoogleSerperAPIWrapper": {
        "Google Serper API": "https://python.langchain.com/docs/integrations/tools/google_serper",
        "Google Serper": "https://python.langchain.com/docs/integrations/providers/google_serper",
        "Retrieve as you generate with FLARE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/flare"
    },
    "GooglePlacesTool": {
        "Google Places": "https://python.langchain.com/docs/integrations/tools/google_places"
    },
    "HumanInputRun": {
        "Human as a tool": "https://python.langchain.com/docs/integrations/tools/human_tools",
        "!pip install bs4": "https://python.langchain.com/docs/use_cases/autonomous_agents/marathon_times"
    },
    "NucliaUnderstandingAPI": {
        "Nuclia Understanding API tool": "https://python.langchain.com/docs/integrations/tools/nuclia",
        "Nuclia Understanding API document transformer": "https://python.langchain.com/docs/integrations/document_transformers/nuclia_transformer",
        "Nuclia Understanding API document loader": "https://python.langchain.com/docs/integrations/document_loaders/nuclia"
    },
    "TwilioAPIWrapper": {
        "Twilio": "https://python.langchain.com/docs/integrations/tools/twilio"
    },
    "IFTTTWebhook": {
        "IFTTT WebHooks": "https://python.langchain.com/docs/integrations/tools/ifttt"
    },
    "WikipediaQueryRun": {
        "Wikipedia": "https://python.langchain.com/docs/integrations/tools/wikipedia"
    },
    "WikipediaAPIWrapper": {
        "Wikipedia": "https://python.langchain.com/docs/integrations/tools/wikipedia",
        "Zep Memory": "https://python.langchain.com/docs/integrations/memory/zep_memory"
    },
    "AlphaVantageAPIWrapper": {
        "Alpha Vantage": "https://python.langchain.com/docs/integrations/tools/alpha_vantage"
    },
    "TextRequestsWrapper": {
        "Requests": "https://python.langchain.com/docs/integrations/tools/requests",
        "JSON Agent": "https://python.langchain.com/docs/integrations/toolkits/json",
        "OpenAPI agents": "https://python.langchain.com/docs/integrations/toolkits/openapi",
        "Tool Input Schema": "https://python.langchain.com/docs/modules/agents/tools/tool_input_validation"
    },
    "OpenWeatherMapAPIWrapper": {
        "OpenWeatherMap API": "https://python.langchain.com/docs/integrations/tools/openweathermap",
        "OpenWeatherMap": "https://python.langchain.com/docs/integrations/providers/openweathermap"
    },
    "PubmedQueryRun": {
        "PubMed Tool": "https://python.langchain.com/docs/integrations/tools/pubmed"
    },
    "YouTubeSearchTool": {
        "YouTubeSearchTool": "https://python.langchain.com/docs/integrations/tools/youtube"
    },
    "VectorstoreIndexCreator": {
        "Apify": "https://python.langchain.com/docs/integrations/tools/apify",
        "HuggingFace dataset": "https://python.langchain.com/docs/integrations/document_loaders/hugging_face_dataset",
        "Spreedly": "https://python.langchain.com/docs/integrations/document_loaders/spreedly",
        "Image captions": "https://python.langchain.com/docs/integrations/document_loaders/image_captions",
        "Figma": "https://python.langchain.com/docs/integrations/document_loaders/figma",
        "Apify Dataset": "https://python.langchain.com/docs/integrations/document_loaders/apify_dataset",
        "Iugu": "https://python.langchain.com/docs/integrations/document_loaders/iugu",
        "Stripe": "https://python.langchain.com/docs/integrations/document_loaders/stripe",
        "Modern Treasury": "https://python.langchain.com/docs/integrations/document_loaders/modern_treasury",
        "QA over Documents": "https://python.langchain.com/docs/use_cases/question_answering/index",
        "Multiple Retrieval Sources": "https://python.langchain.com/docs/use_cases/question_answering/how_to/multiple_retrieval"
    },
    "ZapierToolkit": {
        "Zapier Natural Language Actions API": "https://python.langchain.com/docs/integrations/tools/zapier"
    },
    "ZapierNLAWrapper": {
        "Zapier Natural Language Actions API": "https://python.langchain.com/docs/integrations/tools/zapier"
    },
    "LLMChain": {
        "Zapier Natural Language Actions API": "https://python.langchain.com/docs/integrations/tools/zapier",
        "Dall-E Image Generator": "https://python.langchain.com/docs/integrations/tools/dalle_image_generator",
        "Streamlit Chat Message History": "https://python.langchain.com/docs/integrations/memory/streamlit_chat_message_history",
        "Argilla": "https://python.langchain.com/docs/integrations/callbacks/argilla",
        "Comet": "https://python.langchain.com/docs/integrations/providers/comet_tracking",
        "Aim": "https://python.langchain.com/docs/integrations/providers/aim_tracking",
        "Weights & Biases": "https://python.langchain.com/docs/integrations/providers/wandb_tracking",
        "SageMaker Tracking": "https://python.langchain.com/docs/integrations/providers/sagemaker_tracking",
        "Rebuff": "https://python.langchain.com/docs/integrations/providers/rebuff",
        "MLflow": "https://python.langchain.com/docs/integrations/providers/mlflow_tracking",
        "Flyte": "https://python.langchain.com/docs/integrations/providers/flyte",
        "Chat Over Documents with Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_chat",
        "Vectara Text Generation": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_text_generation",
        "Natural Language APIs": "https://python.langchain.com/docs/integrations/toolkits/openapi_nla",
        "JSON Agent": "https://python.langchain.com/docs/integrations/toolkits/json",
        "Figma": "https://python.langchain.com/docs/integrations/document_loaders/figma",
        "Predibase": "https://python.langchain.com/docs/integrations/llms/predibase",
        "Eden AI": "https://python.langchain.com/docs/integrations/llms/edenai",
        "AzureML Online Endpoint": "https://python.langchain.com/docs/integrations/llms/azureml_endpoint_example",
        "Custom Trajectory Evaluator": "https://python.langchain.com/docs/guides/evaluation/trajectory/custom",
        "Custom Pairwise Evaluator": "https://python.langchain.com/docs/guides/evaluation/comparison/custom",
        "Chatbots": "https://python.langchain.com/docs/use_cases/chatbots",
        "Summarization": "https://python.langchain.com/docs/use_cases/summarization",
        "Interacting with APIs": "https://python.langchain.com/docs/use_cases/apis",
        "Retrieve from vector stores directly": "https://python.langchain.com/docs/use_cases/question_answering/how_to/vector_db_text_generation",
        "Improve document indexing with HyDE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/hyde",
        "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa",
        "Multi-agent authoritarian speaker selection": "https://python.langchain.com/docs/use_cases/agent_simulations/multiagent_authoritarian",
        "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research",
        "Lost in the middle: The problem with long contexts": "https://python.langchain.com/docs/modules/data_connection/document_transformers/post_retrieval/long_context_reorder",
        "How to add Memory to an LLMChain": "https://python.langchain.com/docs/modules/memory/adding_memory",
        "Logging to file": "https://python.langchain.com/docs/modules/callbacks/filecallbackhandler",
        "XML Agent": "https://python.langchain.com/docs/modules/agents/agent_types/xml_agent",
        "Datetime parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/datetime",
        "Prompt Pipelining": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/prompts_pipelining",
        "Connecting to a Feature Store": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/connecting_to_a_feature_store",
        "Router": "https://python.langchain.com/docs/modules/chains/foundational/router",
        "Transformation": "https://python.langchain.com/docs/modules/chains/foundational/transformation",
        "Async API": "https://python.langchain.com/docs/modules/chains/how_to/async_chain"
    },
    "TransformChain": {
        "Zapier Natural Language Actions API": "https://python.langchain.com/docs/integrations/tools/zapier",
        "Rebuff": "https://python.langchain.com/docs/integrations/providers/rebuff",
        "Transformation": "https://python.langchain.com/docs/modules/chains/foundational/transformation"
    },
    "SimpleSequentialChain": {
        "Zapier Natural Language Actions API": "https://python.langchain.com/docs/integrations/tools/zapier",
        "SageMaker Tracking": "https://python.langchain.com/docs/integrations/providers/sagemaker_tracking",
        "Rebuff": "https://python.langchain.com/docs/integrations/providers/rebuff",
        "Baseten": "https://python.langchain.com/docs/integrations/llms/baseten",
        "Predibase": "https://python.langchain.com/docs/integrations/llms/predibase",
        "Eden AI": "https://python.langchain.com/docs/integrations/llms/edenai",
        "Replicate": "https://python.langchain.com/docs/integrations/llms/replicate",
        "Transformation": "https://python.langchain.com/docs/modules/chains/foundational/transformation"
    },
    "ZapierNLARunAction": {
        "Zapier Natural Language Actions API": "https://python.langchain.com/docs/integrations/tools/zapier"
    },
    "GoldenQueryAPIWrapper": {
        "Golden Query": "https://python.langchain.com/docs/integrations/tools/golden_query",
        "Golden": "https://python.langchain.com/docs/integrations/providers/golden"
    },
    "ArxivAPIWrapper": {
        "ArXiv API Tool": "https://python.langchain.com/docs/integrations/tools/arxiv"
    },
    "tool": {
        "Metaphor Search": "https://python.langchain.com/docs/integrations/tools/metaphor_search",
        "JSONFormer": "https://python.langchain.com/docs/integrations/llms/jsonformer_experimental",
        "Agent Trajectory": "https://python.langchain.com/docs/guides/evaluation/trajectory/trajectory_eval",
        "!pip install bs4": "https://python.langchain.com/docs/use_cases/autonomous_agents/marathon_times",
        "Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools",
        "XML Agent": "https://python.langchain.com/docs/modules/agents/agent_types/xml_agent"
    },
    "OpenAIFunctionsAgent": {
        "Metaphor Search": "https://python.langchain.com/docs/integrations/tools/metaphor_search",
        "Conversational Retrieval Agent": "https://python.langchain.com/docs/use_cases/question_answering/how_to/conversational_retrieval_agents"
    },
    "SystemMessage": {
        "Metaphor Search": "https://python.langchain.com/docs/integrations/tools/metaphor_search",
        "Anthropic": "https://python.langchain.com/docs/integrations/chat/anthropic",
        "\ud83d\ude85 LiteLLM": "https://python.langchain.com/docs/integrations/chat/litellm",
        "OpenAI": "https://python.langchain.com/docs/integrations/chat/openai",
        "Google Cloud Platform Vertex AI PaLM ": "https://python.langchain.com/docs/integrations/chat/google_vertex_ai_palm",
        "JinaChat": "https://python.langchain.com/docs/integrations/chat/jinachat",
        "ERNIE-Bot Chat": "https://python.langchain.com/docs/integrations/chat/ernie",
        "Anyscale": "https://python.langchain.com/docs/integrations/chat/anyscale",
        "Context": "https://python.langchain.com/docs/integrations/callbacks/context",
        "Label Studio": "https://python.langchain.com/docs/integrations/callbacks/labelstudio",
        "MLflow AI Gateway": "https://python.langchain.com/docs/integrations/providers/mlflow_ai_gateway",
        "Chatbots": "https://python.langchain.com/docs/use_cases/chatbots",
        "Conversational Retrieval Agent": "https://python.langchain.com/docs/use_cases/question_answering/how_to/conversational_retrieval_agents",
        "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa",
        "CAMEL Role-Playing Autonomous Cooperative Agents": "https://python.langchain.com/docs/use_cases/agent_simulations/camel_role_playing",
        "Multi-Agent Simulated Environment: Petting Zoo": "https://python.langchain.com/docs/use_cases/agent_simulations/petting_zoo",
        "Multi-agent decentralized speaker selection": "https://python.langchain.com/docs/use_cases/agent_simulations/multiagent_bidding",
        "Multi-agent authoritarian speaker selection": "https://python.langchain.com/docs/use_cases/agent_simulations/multiagent_authoritarian",
        "Two-Player Dungeons & Dragons": "https://python.langchain.com/docs/use_cases/agent_simulations/two_player_dnd",
        "Multi-Player Dungeons & Dragons": "https://python.langchain.com/docs/use_cases/agent_simulations/multi_player_dnd",
        "Simulated Environment: Gymnasium": "https://python.langchain.com/docs/use_cases/agent_simulations/gymnasium",
        "Agent Debates with Tools": "https://python.langchain.com/docs/use_cases/agent_simulations/two_agent_debate_tools",
        "How to add Memory to an LLMChain": "https://python.langchain.com/docs/modules/memory/adding_memory",
        "Use ToolKits with OpenAI Functions": "https://python.langchain.com/docs/modules/agents/how_to/use_toolkits_with_openai_functions",
        "Prompt Pipelining": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/prompts_pipelining",
        "Using OpenAI functions": "https://python.langchain.com/docs/modules/chains/how_to/openai_functions"
    },
    "AgentExecutor": {
        "Metaphor Search": "https://python.langchain.com/docs/integrations/tools/metaphor_search",
        "Jina": "https://python.langchain.com/docs/integrations/providers/jina",
        "PowerBI Dataset Agent": "https://python.langchain.com/docs/integrations/toolkits/powerbi",
        "SQL Database Agent": "https://python.langchain.com/docs/integrations/toolkits/sql_database",
        "JSON Agent": "https://python.langchain.com/docs/integrations/toolkits/json",
        "NIBittensorLLM": "https://python.langchain.com/docs/integrations/llms/bittensor",
        "SQL": "https://python.langchain.com/docs/use_cases/sql",
        "BabyAGI with Tools": "https://python.langchain.com/docs/use_cases/agents/baby_agi_with_agent",
        "Conversational Retrieval Agent": "https://python.langchain.com/docs/use_cases/question_answering/how_to/conversational_retrieval_agents",
        "Plug-and-Plai": "https://python.langchain.com/docs/use_cases/agents/custom_agent_with_plugin_retrieval_using_plugnplai",
        "Wikibase Agent": "https://python.langchain.com/docs/use_cases/agents/wikibase_agent",
        "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/agents/sales_agent_with_context",
        "Custom Agent with PlugIn Retrieval": "https://python.langchain.com/docs/use_cases/agents/custom_agent_with_plugin_retrieval",
        "Adding Message Memory backed by a database to an Agent": "https://python.langchain.com/docs/modules/memory/agent_with_memory_in_db",
        "How to add Memory to an Agent": "https://python.langchain.com/docs/modules/memory/agent_with_memory",
        "XML Agent": "https://python.langchain.com/docs/modules/agents/agent_types/xml_agent",
        "Custom MRKL agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_mrkl_agent",
        "Shared memory across agents and tools": "https://python.langchain.com/docs/modules/agents/how_to/sharedmemory_for_tools",
        "Custom multi-action agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_multi_action_agent",
        "Running Agent as an Iterator": "https://python.langchain.com/docs/modules/agents/how_to/agent_iter",
        "Custom agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent",
        "Custom agent with tool retrieval": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent_with_tool_retrieval"
    },
    "MetaphorSearchAPIWrapper": {
        "Metaphor Search": "https://python.langchain.com/docs/integrations/tools/metaphor_search"
    },
    "PlayWrightBrowserToolkit": {
        "Metaphor Search": "https://python.langchain.com/docs/integrations/tools/metaphor_search",
        "PlayWright Browser Toolkit": "https://python.langchain.com/docs/integrations/toolkits/playwright"
    },
    "create_async_playwright_browser": {
        "Metaphor Search": "https://python.langchain.com/docs/integrations/tools/metaphor_search",
        "PlayWright Browser Toolkit": "https://python.langchain.com/docs/integrations/toolkits/playwright"
    },
    "MetaphorSearchResults": {
        "Metaphor Search": "https://python.langchain.com/docs/integrations/tools/metaphor_search"
    },
    "SerpAPIWrapper": {
        "SerpAPI": "https://python.langchain.com/docs/integrations/providers/serpapi",
        "NIBittensorLLM": "https://python.langchain.com/docs/integrations/llms/bittensor",
        "AutoGPT": "https://python.langchain.com/docs/use_cases/autonomous_agents/autogpt"
    },
    "GraphQLAPIWrapper": {
        "GraphQL tool": "https://python.langchain.com/docs/integrations/tools/graphql"
    },
    "DuckDuckGoSearchRun": {
        "DuckDuckGo Search": "https://python.langchain.com/docs/integrations/tools/ddg",
        "Github Toolkit": "https://python.langchain.com/docs/integrations/toolkits/github",
        "Cookbook": "https://python.langchain.com/docs/guides/expression_language/cookbook",
        "!pip install bs4": "https://python.langchain.com/docs/use_cases/autonomous_agents/marathon_times"
    },
    "DuckDuckGoSearchResults": {
        "DuckDuckGo Search": "https://python.langchain.com/docs/integrations/tools/ddg"
    },
    "DuckDuckGoSearchAPIWrapper": {
        "DuckDuckGo Search": "https://python.langchain.com/docs/integrations/tools/ddg"
    },
    "ConversationBufferMemory": {
        "Gradio Tools": "https://python.langchain.com/docs/integrations/tools/gradio_tools",
        "SceneXplain": "https://python.langchain.com/docs/integrations/tools/sceneXplain",
        "Streamlit Chat Message History": "https://python.langchain.com/docs/integrations/memory/streamlit_chat_message_history",
        "Dynamodb Chat Message History": "https://python.langchain.com/docs/integrations/memory/dynamodb_chat_message_history",
        "Chat Over Documents with Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_chat",
        "NIBittensorLLM": "https://python.langchain.com/docs/integrations/llms/bittensor",
        "Bedrock": "https://python.langchain.com/docs/integrations/llms/bedrock",
        "Cookbook": "https://python.langchain.com/docs/guides/expression_language/cookbook",
        "Chatbots": "https://python.langchain.com/docs/use_cases/chatbots",
        "QA over Documents": "https://python.langchain.com/docs/use_cases/question_answering/index",
        "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa",
        "Agent Debates with Tools": "https://python.langchain.com/docs/use_cases/agent_simulations/two_agent_debate_tools",
        "Adding Message Memory backed by a database to an Agent": "https://python.langchain.com/docs/modules/memory/agent_with_memory_in_db",
        "How to add memory to a Multi-Input Chain": "https://python.langchain.com/docs/modules/memory/adding_memory_chain_multiple_inputs",
        "How to add Memory to an LLMChain": "https://python.langchain.com/docs/modules/memory/adding_memory",
        "How to use multiple memory classes in the same chain": "https://python.langchain.com/docs/modules/memory/multiple_memory",
        "How to customize conversational memory": "https://python.langchain.com/docs/modules/memory/conversational_customization",
        "How to add Memory to an Agent": "https://python.langchain.com/docs/modules/memory/agent_with_memory",
        "Shared memory across agents and tools": "https://python.langchain.com/docs/modules/agents/how_to/sharedmemory_for_tools",
        "Add Memory to OpenAI Functions Agent": "https://python.langchain.com/docs/modules/agents/how_to/add_memory_openai_functions"
    },
    "SceneXplainTool": {
        "SceneXplain": "https://python.langchain.com/docs/integrations/tools/sceneXplain"
    },
    "WolframAlphaAPIWrapper": {
        "Wolfram Alpha": "https://python.langchain.com/docs/integrations/providers/wolfram_alpha"
    },
    "load_huggingface_tool": {
        "Requires transformers>=4.29.0 and huggingface_hub>=0.14.1": "https://python.langchain.com/docs/integrations/tools/huggingface_tools"
    },
    "GoogleSearchAPIWrapper": {
        "Google Search": "https://python.langchain.com/docs/integrations/providers/google_search",
        "NIBittensorLLM": "https://python.langchain.com/docs/integrations/llms/bittensor",
        "Web Scraping": "https://python.langchain.com/docs/use_cases/web_scraping",
        "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research",
        "Adding Message Memory backed by a database to an Agent": "https://python.langchain.com/docs/modules/memory/agent_with_memory_in_db",
        "How to add Memory to an Agent": "https://python.langchain.com/docs/modules/memory/agent_with_memory",
        "Shared memory across agents and tools": "https://python.langchain.com/docs/modules/agents/how_to/sharedmemory_for_tools"
    },
    "BingSearchAPIWrapper": {
        "Bing Search": "https://python.langchain.com/docs/integrations/tools/bing_search"
    },
    "DallEAPIWrapper": {
        "Dall-E Image Generator": "https://python.langchain.com/docs/integrations/tools/dalle_image_generator"
    },
    "ShellTool": {
        "Shell Tool": "https://python.langchain.com/docs/integrations/tools/bash",
        "Human-in-the-loop Tool Validation": "https://python.langchain.com/docs/modules/agents/tools/human_approval"
    },
    "ReadFileTool": {
        "File System Tools": "https://python.langchain.com/docs/integrations/tools/filesystem",
        "AutoGPT": "https://python.langchain.com/docs/use_cases/autonomous_agents/autogpt",
        "!pip install bs4": "https://python.langchain.com/docs/use_cases/autonomous_agents/marathon_times"
    },
    "CopyFileTool": {
        "File System Tools": "https://python.langchain.com/docs/integrations/tools/filesystem"
    },
    "DeleteFileTool": {
        "File System Tools": "https://python.langchain.com/docs/integrations/tools/filesystem"
    },
    "MoveFileTool": {
        "File System Tools": "https://python.langchain.com/docs/integrations/tools/filesystem",
        "Tools as OpenAI Functions": "https://python.langchain.com/docs/modules/agents/tools/tools_as_openai_functions"
    },
    "WriteFileTool": {
        "File System Tools": "https://python.langchain.com/docs/integrations/tools/filesystem",
        "AutoGPT": "https://python.langchain.com/docs/use_cases/autonomous_agents/autogpt",
        "!pip install bs4": "https://python.langchain.com/docs/use_cases/autonomous_agents/marathon_times"
    },
    "ListDirectoryTool": {
        "File System Tools": "https://python.langchain.com/docs/integrations/tools/filesystem"
    },
    "FileManagementToolkit": {
        "File System Tools": "https://python.langchain.com/docs/integrations/tools/filesystem"
    },
    "BraveSearch": {
        "Brave Search": "https://python.langchain.com/docs/integrations/providers/brave_search"
    },
    "RedisChatMessageHistory": {
        "Redis Chat Message History": "https://python.langchain.com/docs/integrations/memory/redis_chat_message_history",
        "Adding Message Memory backed by a database to an Agent": "https://python.langchain.com/docs/modules/memory/agent_with_memory_in_db"
    },
    "ConversationChain": {
        "Entity Memory with SQLite storage": "https://python.langchain.com/docs/integrations/memory/entity_memory_with_sqlite",
        "Figma": "https://python.langchain.com/docs/integrations/document_loaders/figma",
        "Bedrock": "https://python.langchain.com/docs/integrations/llms/bedrock",
        "Chatbots": "https://python.langchain.com/docs/use_cases/chatbots",
        "Agent Debates with Tools": "https://python.langchain.com/docs/use_cases/agent_simulations/two_agent_debate_tools",
        "How to use multiple memory classes in the same chain": "https://python.langchain.com/docs/modules/memory/multiple_memory",
        "How to customize conversational memory": "https://python.langchain.com/docs/modules/memory/conversational_customization",
        "Conversation Knowledge Graph Memory": "https://python.langchain.com/docs/modules/memory/types/kg",
        "ConversationTokenBufferMemory": "https://python.langchain.com/docs/modules/memory/types/token_buffer",
        "ConversationSummaryBufferMemory": "https://python.langchain.com/docs/modules/memory/types/summary_buffer",
        "Router": "https://python.langchain.com/docs/modules/chains/foundational/router"
    },
    "ConversationEntityMemory": {
        "Entity Memory with SQLite storage": "https://python.langchain.com/docs/integrations/memory/entity_memory_with_sqlite"
    },
    "SQLiteEntityStore": {
        "Entity Memory with SQLite storage": "https://python.langchain.com/docs/integrations/memory/entity_memory_with_sqlite"
    },
    "ENTITY_MEMORY_CONVERSATION_TEMPLATE": {
        "Entity Memory with SQLite storage": "https://python.langchain.com/docs/integrations/memory/entity_memory_with_sqlite"
    },
    "PostgresChatMessageHistory": {
        "Postgres Chat Message History": "https://python.langchain.com/docs/integrations/memory/postgres_chat_message_history"
    },
    "MomentoChatMessageHistory": {
        "Momento Chat Message History": "https://python.langchain.com/docs/integrations/memory/momento_chat_message_history"
    },
    "MongoDBChatMessageHistory": {
        "Mongodb Chat Message History": "https://python.langchain.com/docs/integrations/memory/mongodb_chat_message_history"
    },
    "CassandraChatMessageHistory": {
        "Cassandra Chat Message History": "https://python.langchain.com/docs/integrations/memory/cassandra_chat_message_history",
        "Cassandra": "https://python.langchain.com/docs/integrations/providers/cassandra"
    },
    "MotorheadMemory": {
        "Mot\u00f6rhead Memory": "https://python.langchain.com/docs/integrations/memory/motorhead_memory",
        "Mot\u00f6rhead Memory (Managed)": "https://python.langchain.com/docs/integrations/memory/motorhead_memory_managed"
    },
    "StreamlitChatMessageHistory": {
        "Streamlit Chat Message History": "https://python.langchain.com/docs/integrations/memory/streamlit_chat_message_history"
    },
    "DynamoDBChatMessageHistory": {
        "Dynamodb Chat Message History": "https://python.langchain.com/docs/integrations/memory/dynamodb_chat_message_history"
    },
    "PythonREPL": {
        "Dynamodb Chat Message History": "https://python.langchain.com/docs/integrations/memory/dynamodb_chat_message_history",
        "Python Agent": "https://python.langchain.com/docs/integrations/toolkits/python",
        "Cookbook": "https://python.langchain.com/docs/guides/expression_language/cookbook"
    },
    "RocksetChatMessageHistory": {
        "Rockset Chat Message History": "https://python.langchain.com/docs/integrations/memory/rockset_chat_message_history"
    },
    "AzureMLChatOnlineEndpoint": {
        "AzureML Chat Online Endpoint": "https://python.langchain.com/docs/integrations/chat/azureml_chat_endpoint"
    },
    "LlamaContentFormatter": {
        "AzureML Chat Online Endpoint": "https://python.langchain.com/docs/integrations/chat/azureml_chat_endpoint"
    },
    "ChatAnthropic": {
        "Anthropic": "https://python.langchain.com/docs/integrations/chat/anthropic",
        "Log10": "https://python.langchain.com/docs/integrations/providers/log10",
        "PlayWright Browser Toolkit": "https://python.langchain.com/docs/integrations/toolkits/playwright",
        "Fallbacks": "https://python.langchain.com/docs/guides/fallbacks",
        "Agent Trajectory": "https://python.langchain.com/docs/guides/evaluation/trajectory/trajectory_eval",
        "Custom Pairwise Evaluator": "https://python.langchain.com/docs/guides/evaluation/comparison/custom",
        "Pairwise String Comparison": "https://python.langchain.com/docs/guides/evaluation/comparison/pairwise_string",
        "Criteria Evaluation": "https://python.langchain.com/docs/guides/evaluation/string/criteria_eval_chain",
        "XML Agent": "https://python.langchain.com/docs/modules/agents/agent_types/xml_agent",
        "Few shot examples for chat models": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot_examples_chat"
    },
    "ChatPromptTemplate": {
        "Anthropic": "https://python.langchain.com/docs/integrations/chat/anthropic",
        "\ud83d\ude85 LiteLLM": "https://python.langchain.com/docs/integrations/chat/litellm",
        "OpenAI": "https://python.langchain.com/docs/integrations/chat/openai",
        "Google Cloud Platform Vertex AI PaLM ": "https://python.langchain.com/docs/integrations/chat/google_vertex_ai_palm",
        "JinaChat": "https://python.langchain.com/docs/integrations/chat/jinachat",
        "Context": "https://python.langchain.com/docs/integrations/callbacks/context",
        "OpenAI Functions Metadata Tagger": "https://python.langchain.com/docs/integrations/document_transformers/openai_metadata_tagger",
        "Figma": "https://python.langchain.com/docs/integrations/document_loaders/figma",
        "Fireworks": "https://python.langchain.com/docs/integrations/llms/Fireworks",
        "Fallbacks": "https://python.langchain.com/docs/guides/fallbacks",
        "Cookbook": "https://python.langchain.com/docs/guides/expression_language/cookbook",
        "Interface": "https://python.langchain.com/docs/guides/expression_language/interface",
        "Chatbots": "https://python.langchain.com/docs/use_cases/chatbots",
        "Extraction": "https://python.langchain.com/docs/use_cases/extraction",
        "Tagging": "https://python.langchain.com/docs/use_cases/tagging",
        "Multiple Retrieval Sources": "https://python.langchain.com/docs/use_cases/question_answering/how_to/multiple_retrieval",
        "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa",
        "Multi-agent authoritarian speaker selection": "https://python.langchain.com/docs/use_cases/agent_simulations/multiagent_authoritarian",
        "How to add Memory to an LLMChain": "https://python.langchain.com/docs/modules/memory/adding_memory",
        "Retry parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/retry",
        "Pydantic (JSON) parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/pydantic",
        "Few shot examples for chat models": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot_examples_chat",
        "Prompt Pipelining": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/prompts_pipelining",
        "Using OpenAI functions": "https://python.langchain.com/docs/modules/chains/how_to/openai_functions"
    },
    "SystemMessagePromptTemplate": {
        "Anthropic": "https://python.langchain.com/docs/integrations/chat/anthropic",
        "\ud83d\ude85 LiteLLM": "https://python.langchain.com/docs/integrations/chat/litellm",
        "OpenAI": "https://python.langchain.com/docs/integrations/chat/openai",
        "Google Cloud Platform Vertex AI PaLM ": "https://python.langchain.com/docs/integrations/chat/google_vertex_ai_palm",
        "JinaChat": "https://python.langchain.com/docs/integrations/chat/jinachat",
        "Figma": "https://python.langchain.com/docs/integrations/document_loaders/figma",
        "Cookbook": "https://python.langchain.com/docs/guides/expression_language/cookbook",
        "Chatbots": "https://python.langchain.com/docs/use_cases/chatbots",
        "CAMEL Role-Playing Autonomous Cooperative Agents": "https://python.langchain.com/docs/use_cases/agent_simulations/camel_role_playing"
    },
    "AIMessagePromptTemplate": {
        "Anthropic": "https://python.langchain.com/docs/integrations/chat/anthropic",
        "\ud83d\ude85 LiteLLM": "https://python.langchain.com/docs/integrations/chat/litellm",
        "OpenAI": "https://python.langchain.com/docs/integrations/chat/openai",
        "JinaChat": "https://python.langchain.com/docs/integrations/chat/jinachat",
        "Figma": "https://python.langchain.com/docs/integrations/document_loaders/figma"
    },
    "HumanMessagePromptTemplate": {
        "Anthropic": "https://python.langchain.com/docs/integrations/chat/anthropic",
        "\ud83d\ude85 LiteLLM": "https://python.langchain.com/docs/integrations/chat/litellm",
        "OpenAI": "https://python.langchain.com/docs/integrations/chat/openai",
        "Google Cloud Platform Vertex AI PaLM ": "https://python.langchain.com/docs/integrations/chat/google_vertex_ai_palm",
        "JinaChat": "https://python.langchain.com/docs/integrations/chat/jinachat",
        "Context": "https://python.langchain.com/docs/integrations/callbacks/context",
        "Figma": "https://python.langchain.com/docs/integrations/document_loaders/figma",
        "Fireworks": "https://python.langchain.com/docs/integrations/llms/Fireworks",
        "Cookbook": "https://python.langchain.com/docs/guides/expression_language/cookbook",
        "Chatbots": "https://python.langchain.com/docs/use_cases/chatbots",
        "Extraction": "https://python.langchain.com/docs/use_cases/extraction",
        "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa",
        "CAMEL Role-Playing Autonomous Cooperative Agents": "https://python.langchain.com/docs/use_cases/agent_simulations/camel_role_playing",
        "Multi-agent authoritarian speaker selection": "https://python.langchain.com/docs/use_cases/agent_simulations/multiagent_authoritarian",
        "How to add Memory to an LLMChain": "https://python.langchain.com/docs/modules/memory/adding_memory",
        "Retry parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/retry",
        "Pydantic (JSON) parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/pydantic",
        "Prompt Pipelining": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/prompts_pipelining",
        "Using OpenAI functions": "https://python.langchain.com/docs/modules/chains/how_to/openai_functions"
    },
    "CallbackManager": {
        "Anthropic": "https://python.langchain.com/docs/integrations/chat/anthropic",
        "\ud83d\ude85 LiteLLM": "https://python.langchain.com/docs/integrations/chat/litellm",
        "Ollama": "https://python.langchain.com/docs/integrations/llms/ollama",
        "Llama.cpp": "https://python.langchain.com/docs/integrations/llms/llamacpp",
        "Titan Takeoff": "https://python.langchain.com/docs/integrations/llms/titan_takeoff",
        "Use local LLMs": "https://python.langchain.com/docs/use_cases/question_answering/how_to/local_retrieval_qa",
        "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research"
    },
    "StreamingStdOutCallbackHandler": {
        "Anthropic": "https://python.langchain.com/docs/integrations/chat/anthropic",
        "\ud83d\ude85 LiteLLM": "https://python.langchain.com/docs/integrations/chat/litellm",
        "GPT4All": "https://python.langchain.com/docs/integrations/llms/gpt4all",
        "Arthur": "https://python.langchain.com/docs/integrations/providers/arthur_tracking",
        "Chat Over Documents with Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_chat",
        "Ollama": "https://python.langchain.com/docs/integrations/llms/ollama",
        "Llama.cpp": "https://python.langchain.com/docs/integrations/llms/llamacpp",
        "Titan Takeoff": "https://python.langchain.com/docs/integrations/llms/titan_takeoff",
        "Eden AI": "https://python.langchain.com/docs/integrations/llms/edenai",
        "C Transformers": "https://python.langchain.com/docs/integrations/llms/ctransformers",
        "Huggingface TextGen Inference": "https://python.langchain.com/docs/integrations/llms/huggingface_textgen_inference",
        "Replicate": "https://python.langchain.com/docs/integrations/llms/replicate",
        "Use local LLMs": "https://python.langchain.com/docs/use_cases/question_answering/how_to/local_retrieval_qa",
        "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research"
    },
    "ChatLiteLLM": {
        "\ud83d\ude85 LiteLLM": "https://python.langchain.com/docs/integrations/chat/litellm"
    },
    "create_tagging_chain": {
        "Llama API": "https://python.langchain.com/docs/integrations/chat/llama_api",
        "Anthropic Functions": "https://python.langchain.com/docs/integrations/chat/anthropic_functions",
        "Tagging": "https://python.langchain.com/docs/use_cases/tagging"
    },
    "ChatVertexAI": {
        "Google Cloud Platform Vertex AI PaLM ": "https://python.langchain.com/docs/integrations/chat/google_vertex_ai_palm"
    },
    "JinaChat": {
        "JinaChat": "https://python.langchain.com/docs/integrations/chat/jinachat"
    },
    "AzureChatOpenAI": {
        "Azure": "https://python.langchain.com/docs/integrations/chat/azure_chat_openai",
        "Azure OpenAI": "https://python.langchain.com/docs/integrations/providers/azure_openai"
    },
    "get_openai_callback": {
        "Azure": "https://python.langchain.com/docs/integrations/chat/azure_chat_openai",
        "Token counting": "https://python.langchain.com/docs/modules/callbacks/token_counting",
        "Tracking token usage": "https://python.langchain.com/docs/modules/model_io/models/llms/token_usage_tracking"
    },
    "ErnieBotChat": {
        "ERNIE-Bot Chat": "https://python.langchain.com/docs/integrations/chat/ernie"
    },
    "PromptLayerChatOpenAI": {
        "PromptLayer ChatOpenAI": "https://python.langchain.com/docs/integrations/chat/promptlayer_chatopenai"
    },
    "ChatAnyscale": {
        "Anyscale": "https://python.langchain.com/docs/integrations/chat/anyscale"
    },
    "create_extraction_chain": {
        "Anthropic Functions": "https://python.langchain.com/docs/integrations/chat/anthropic_functions",
        "Web Scraping": "https://python.langchain.com/docs/use_cases/web_scraping",
        "Extraction": "https://python.langchain.com/docs/use_cases/extraction"
    },
    "ContextCallbackHandler": {
        "Context": "https://python.langchain.com/docs/integrations/callbacks/context"
    },
    "LabelStudioCallbackHandler": {
        "Label Studio": "https://python.langchain.com/docs/integrations/callbacks/labelstudio"
    },
    "ArgillaCallbackHandler": {
        "Argilla": "https://python.langchain.com/docs/integrations/providers/argilla"
    },
    "StdOutCallbackHandler": {
        "Argilla": "https://python.langchain.com/docs/integrations/callbacks/argilla",
        "Comet": "https://python.langchain.com/docs/integrations/providers/comet_tracking",
        "Aim": "https://python.langchain.com/docs/integrations/providers/aim_tracking",
        "Weights & Biases": "https://python.langchain.com/docs/integrations/providers/wandb_tracking",
        "ClearML": "https://python.langchain.com/docs/integrations/providers/clearml_tracking",
        "Async API": "https://python.langchain.com/docs/modules/agents/how_to/async_agent",
        "Custom chain": "https://python.langchain.com/docs/modules/chains/how_to/custom_chain"
    },
    "PromptLayerCallbackHandler": {
        "PromptLayer": "https://python.langchain.com/docs/integrations/callbacks/promptlayer"
    },
    "GPT4All": {
        "PromptLayer": "https://python.langchain.com/docs/integrations/callbacks/promptlayer",
        "GPT4All": "https://python.langchain.com/docs/integrations/llms/gpt4all",
        "Use local LLMs": "https://python.langchain.com/docs/use_cases/question_answering/how_to/local_retrieval_qa"
    },
    "StreamlitCallbackHandler": {
        "Streamlit": "https://python.langchain.com/docs/integrations/callbacks/.ipynb_checkpoints/streamlit-checkpoint",
        "GPT4All": "https://python.langchain.com/docs/integrations/providers/gpt4all"
    },
    "FigmaFileLoader": {
        "Figma": "https://python.langchain.com/docs/integrations/document_loaders/figma"
    },
    "AzureOpenAI": {
        "Azure OpenAI": "https://python.langchain.com/docs/integrations/llms/azure_openai_example",
        "OpenAI": "https://python.langchain.com/docs/integrations/providers/openai"
    },
    "MyScale": {
        "MyScale": "https://python.langchain.com/docs/integrations/vectorstores/myscale",
        "Self-querying with MyScale": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/myscale_self_query"
    },
    "Baseten": {
        "Baseten": "https://python.langchain.com/docs/integrations/llms/baseten"
    },
    "WeatherDataLoader": {
        "Weather": "https://python.langchain.com/docs/integrations/document_loaders/weather"
    },
    "Tair": {
        "Tair": "https://python.langchain.com/docs/integrations/vectorstores/tair"
    },
    "UnstructuredWordDocumentLoader": {
        "Microsoft Word": "https://python.langchain.com/docs/integrations/document_loaders/microsoft_word"
    },
    "CollegeConfidentialLoader": {
        "College Confidential": "https://python.langchain.com/docs/integrations/document_loaders/college_confidential"
    },
    "RWKV": {
        "RWKV-4": "https://python.langchain.com/docs/integrations/providers/rwkv"
    },
    "GoogleDriveLoader": {
        "Google Drive": "https://python.langchain.com/docs/integrations/document_loaders/google_drive"
    },
    "Fireworks": {
        "Fireworks": "https://python.langchain.com/docs/integrations/llms/Fireworks"
    },
    "AmazonAPIGateway": {
        "Amazon API Gateway": "https://python.langchain.com/docs/integrations/llms/amazon_api_gateway_example"
    },
    "UnstructuredPowerPointLoader": {
        "Microsoft PowerPoint": "https://python.langchain.com/docs/integrations/document_loaders/microsoft_powerpoint"
    },
    "CometCallbackHandler": {
        "Comet": "https://python.langchain.com/docs/integrations/providers/comet_tracking"
    },
    "CTransformers": {
        "C Transformers": "https://python.langchain.com/docs/integrations/llms/ctransformers"
    },
    "BiliBiliLoader": {
        "BiliBili": "https://python.langchain.com/docs/integrations/document_loaders/bilibili"
    },
    "DiffbotLoader": {
        "Diffbot": "https://python.langchain.com/docs/integrations/document_loaders/diffbot"
    },
    "DeepSparse": {
        "DeepSparse": "https://python.langchain.com/docs/integrations/llms/deepsparse"
    },
    "AimCallbackHandler": {
        "Aim": "https://python.langchain.com/docs/integrations/providers/aim_tracking"
    },
    "ModernTreasuryLoader": {
        "Modern Treasury": "https://python.langchain.com/docs/integrations/document_loaders/modern_treasury"
    },
    "FacebookChatLoader": {
        "Facebook Chat": "https://python.langchain.com/docs/integrations/document_loaders/facebook_chat"
    },
    "Banana": {
        "Banana": "https://python.langchain.com/docs/integrations/llms/banana"
    },
    "HuggingFacePipeline": {
        "Hugging Face": "https://python.langchain.com/docs/integrations/providers/huggingface",
        "RELLM": "https://python.langchain.com/docs/integrations/llms/rellm_experimental",
        "JSONFormer": "https://python.langchain.com/docs/integrations/llms/jsonformer_experimental"
    },
    "HuggingFaceHub": {
        "Hugging Face": "https://python.langchain.com/docs/integrations/providers/huggingface"
    },
    "HuggingFaceHubEmbeddings": {
        "Hugging Face": "https://python.langchain.com/docs/integrations/providers/huggingface"
    },
    "CharacterTextSplitter": {
        "Hugging Face": "https://python.langchain.com/docs/integrations/providers/huggingface",
        "OpenAI": "https://python.langchain.com/docs/integrations/providers/openai",
        "Elasticsearch": "https://python.langchain.com/docs/integrations/vectorstores/elasticsearch",
        "Vectara Text Generation": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_text_generation",
        "Document Comparison": "https://python.langchain.com/docs/integrations/toolkits/document_comparison_toolkit",
        "Vectorstore Agent": "https://python.langchain.com/docs/integrations/toolkits/vectorstore",
        "LanceDB": "https://python.langchain.com/docs/integrations/vectorstores/lancedb",
        "Weaviate": "https://python.langchain.com/docs/integrations/vectorstores/weaviate",
        "DashVector": "https://python.langchain.com/docs/integrations/vectorstores/dashvector",
        "ScaNN": "https://python.langchain.com/docs/integrations/vectorstores/scann",
        "Xata": "https://python.langchain.com/docs/integrations/vectorstores/xata",
        "Vectara": "https://python.langchain.com/docs/integrations/vectorstores/vectara",
        "Redis": "https://python.langchain.com/docs/integrations/vectorstores/redis",
        "PGVector": "https://python.langchain.com/docs/integrations/vectorstores/pgvector",
        "Rockset": "https://python.langchain.com/docs/integrations/vectorstores/rockset",
        "Dingo": "https://python.langchain.com/docs/integrations/vectorstores/dingo",
        "Zilliz": "https://python.langchain.com/docs/integrations/vectorstores/zilliz",
        "SingleStoreDB": "https://python.langchain.com/docs/integrations/vectorstores/singlestoredb",
        "Annoy": "https://python.langchain.com/docs/integrations/vectorstores/annoy",
        "Typesense": "https://python.langchain.com/docs/integrations/vectorstores/typesense",
        "Activeloop's Deep Lake": "https://python.langchain.com/docs/integrations/vectorstores/activeloop_deeplake",
        "Tair": "https://python.langchain.com/docs/integrations/vectorstores/tair",
        "Chroma": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
        "Alibaba Cloud OpenSearch": "https://python.langchain.com/docs/integrations/vectorstores/alibabacloud_opensearch",
        "StarRocks": "https://python.langchain.com/docs/integrations/vectorstores/starrocks",
        "Clarifai": "https://python.langchain.com/docs/integrations/vectorstores/clarifai",
        "scikit-learn": "https://python.langchain.com/docs/integrations/vectorstores/sklearn",
        "DocArrayHnswSearch": "https://python.langchain.com/docs/integrations/vectorstores/docarray_hnsw",
        "MyScale": "https://python.langchain.com/docs/integrations/vectorstores/myscale",
        "ClickHouse Vector Search": "https://python.langchain.com/docs/integrations/vectorstores/clickhouse",
        "Qdrant": "https://python.langchain.com/docs/integrations/vectorstores/qdrant",
        "Tigris": "https://python.langchain.com/docs/integrations/vectorstores/tigris",
        "AwaDB": "https://python.langchain.com/docs/integrations/vectorstores/awadb",
        "Supabase (Postgres)": "https://python.langchain.com/docs/integrations/vectorstores/supabase",
        "OpenSearch": "https://python.langchain.com/docs/integrations/vectorstores/opensearch",
        "Pinecone": "https://python.langchain.com/docs/integrations/vectorstores/pinecone",
        "BagelDB": "https://python.langchain.com/docs/integrations/vectorstores/bageldb",
        "Azure Cognitive Search": "https://python.langchain.com/docs/integrations/vectorstores/azuresearch",
        "Cassandra": "https://python.langchain.com/docs/integrations/vectorstores/cassandra",
        "USearch": "https://python.langchain.com/docs/integrations/vectorstores/usearch",
        "Milvus": "https://python.langchain.com/docs/integrations/vectorstores/milvus",
        "Marqo": "https://python.langchain.com/docs/integrations/vectorstores/marqo",
        "DocArrayInMemorySearch": "https://python.langchain.com/docs/integrations/vectorstores/docarray_in_memory",
        "pg_embedding": "https://python.langchain.com/docs/integrations/vectorstores/pgembedding",
        "FAISS": "https://python.langchain.com/docs/integrations/vectorstores/faiss",
        "AnalyticDB": "https://python.langchain.com/docs/integrations/vectorstores/analyticdb",
        "Hologres": "https://python.langchain.com/docs/integrations/vectorstores/hologres",
        "MongoDB Atlas": "https://python.langchain.com/docs/integrations/vectorstores/mongodb_atlas",
        "Meilisearch": "https://python.langchain.com/docs/integrations/vectorstores/meilisearch",
        "Figma": "https://python.langchain.com/docs/integrations/document_loaders/figma",
        "Psychic": "https://python.langchain.com/docs/integrations/document_loaders/psychic",
        "Manifest": "https://python.langchain.com/docs/integrations/llms/manifest",
        "Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching",
        "Summarization": "https://python.langchain.com/docs/use_cases/summarization",
        "Conversational Retrieval Agent": "https://python.langchain.com/docs/use_cases/question_answering/how_to/conversational_retrieval_agents",
        "Retrieve from vector stores directly": "https://python.langchain.com/docs/use_cases/question_answering/how_to/vector_db_text_generation",
        "Improve document indexing with HyDE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/hyde",
        "Analysis of Twitter the-algorithm source code with LangChain, GPT4 and Activeloop's Deep Lake": "https://python.langchain.com/docs/use_cases/question_answering/how_to/code/twitter-the-algorithm-analysis-deeplake",
        "Use LangChain, GPT and Activeloop's Deep Lake to work with code base": "https://python.langchain.com/docs/use_cases/question_answering/how_to/code/code-analysis-deeplake",
        "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa",
        "QA using Activeloop's DeepLake": "https://python.langchain.com/docs/use_cases/question_answering/integrations/semantic-search-over-chat",
        "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/agents/sales_agent_with_context",
        "Caching Embeddings": "https://python.langchain.com/docs/modules/data_connection/caching_embeddings",
        "Split by tokens ": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/split_by_token",
        "How to add memory to a Multi-Input Chain": "https://python.langchain.com/docs/modules/memory/adding_memory_chain_multiple_inputs",
        "Combine agents and vector stores": "https://python.langchain.com/docs/modules/agents/how_to/agent_vectorstore",
        "Loading from LangChainHub": "https://python.langchain.com/docs/modules/chains/how_to/from_hub"
    },
    "DocugamiLoader": {
        "Docugami": "https://python.langchain.com/docs/integrations/document_loaders/docugami"
    },
    "GutenbergLoader": {
        "Gutenberg": "https://python.langchain.com/docs/integrations/document_loaders/gutenberg"
    },
    "AzureBlobStorageContainerLoader": {
        "Azure Blob Storage": "https://python.langchain.com/docs/integrations/providers/azure_blob_storage",
        "Azure Blob Storage Container": "https://python.langchain.com/docs/integrations/document_loaders/azure_blob_storage_container"
    },
    "AzureBlobStorageFileLoader": {
        "Azure Blob Storage": "https://python.langchain.com/docs/integrations/providers/azure_blob_storage",
        "Azure Blob Storage File": "https://python.langchain.com/docs/integrations/document_loaders/azure_blob_storage_file"
    },
    "WikipediaLoader": {
        "Wikipedia": "https://python.langchain.com/docs/integrations/document_loaders/wikipedia"
    },
    "ConfluenceLoader": {
        "Confluence": "https://python.langchain.com/docs/integrations/document_loaders/confluence"
    },
    "Predibase": {
        "Predibase": "https://python.langchain.com/docs/integrations/llms/predibase"
    },
    "Beam": {
        "Beam": "https://python.langchain.com/docs/integrations/llms/beam"
    },
    "GrobidParser": {
        "Grobid": "https://python.langchain.com/docs/integrations/document_loaders/grobid"
    },
    "GenericLoader": {
        "Grobid": "https://python.langchain.com/docs/integrations/document_loaders/grobid",
        "Loading documents from a YouTube url": "https://python.langchain.com/docs/integrations/document_loaders/youtube_audio",
        "Source Code": "https://python.langchain.com/docs/integrations/document_loaders/source_code",
        "Code Understanding": "https://python.langchain.com/docs/use_cases/code_understanding"
    },
    "Typesense": {
        "Typesense": "https://python.langchain.com/docs/integrations/vectorstores/typesense"
    },
    "Hologres": {
        "Hologres": "https://python.langchain.com/docs/integrations/vectorstores/hologres"
    },
    "AI21": {
        "AI21 Labs": "https://python.langchain.com/docs/integrations/providers/ai21",
        "AI21": "https://python.langchain.com/docs/integrations/llms/ai21"
    },
    "WandbCallbackHandler": {
        "Weights & Biases": "https://python.langchain.com/docs/integrations/providers/wandb_tracking"
    },
    "ObsidianLoader": {
        "Obsidian": "https://python.langchain.com/docs/integrations/document_loaders/obsidian"
    },
    "create_sql_agent": {
        "CnosDB": "https://python.langchain.com/docs/integrations/providers/cnosdb",
        "SQL Database Agent": "https://python.langchain.com/docs/integrations/toolkits/sql_database",
        "SQL": "https://python.langchain.com/docs/use_cases/sql"
    },
    "SQLDatabaseToolkit": {
        "CnosDB": "https://python.langchain.com/docs/integrations/providers/cnosdb",
        "SQL Database Agent": "https://python.langchain.com/docs/integrations/toolkits/sql_database",
        "SQL": "https://python.langchain.com/docs/use_cases/sql",
        "Use ToolKits with OpenAI Functions": "https://python.langchain.com/docs/modules/agents/how_to/use_toolkits_with_openai_functions"
    },
    "SageMakerCallbackHandler": {
        "SageMaker Tracking": "https://python.langchain.com/docs/integrations/providers/sagemaker_tracking"
    },
    "OpenAIModerationChain": {
        "OpenAI": "https://python.langchain.com/docs/integrations/providers/openai",
        "Cookbook": "https://python.langchain.com/docs/guides/expression_language/cookbook"
    },
    "ChatGPTLoader": {
        "OpenAI": "https://python.langchain.com/docs/integrations/providers/openai",
        "ChatGPT Data": "https://python.langchain.com/docs/integrations/document_loaders/chatgpt_loader"
    },
    "Nebula": {
        "Nebula": "https://python.langchain.com/docs/integrations/providers/symblai_nebula",
        "Nebula (Symbl.ai)": "https://python.langchain.com/docs/integrations/llms/symblai_nebula"
    },
    "AZLyricsLoader": {
        "AZLyrics": "https://python.langchain.com/docs/integrations/document_loaders/azlyrics"
    },
    "ToMarkdownLoader": {
        "2Markdown": "https://python.langchain.com/docs/integrations/document_loaders/tomarkdown"
    },
    "Dingo": {
        "Dingo": "https://python.langchain.com/docs/integrations/vectorstores/dingo"
    },
    "GitLoader": {
        "Git": "https://python.langchain.com/docs/integrations/document_loaders/git"
    },
    "InfinoCallbackHandler": {
        "Infino": "https://python.langchain.com/docs/integrations/providers/infino"
    },
    "MlflowAIGateway": {
        "MLflow AI Gateway": "https://python.langchain.com/docs/integrations/providers/mlflow_ai_gateway"
    },
    "MlflowAIGatewayEmbeddings": {
        "MLflow AI Gateway": "https://python.langchain.com/docs/integrations/providers/mlflow_ai_gateway"
    },
    "ChatMLflowAIGateway": {
        "MLflow AI Gateway": "https://python.langchain.com/docs/integrations/providers/mlflow_ai_gateway"
    },
    "SingleStoreDB": {
        "SingleStoreDB": "https://python.langchain.com/docs/integrations/vectorstores/singlestoredb"
    },
    "Tigris": {
        "Tigris": "https://python.langchain.com/docs/integrations/vectorstores/tigris"
    },
    "Bedrock": {
        "Bedrock": "https://python.langchain.com/docs/integrations/llms/bedrock"
    },
    "S3DirectoryLoader": {
        "AWS S3 Directory": "https://python.langchain.com/docs/integrations/document_loaders/aws_s3_directory"
    },
    "S3FileLoader": {
        "AWS S3 Directory": "https://python.langchain.com/docs/integrations/providers/aws_s3",
        "AWS S3 File": "https://python.langchain.com/docs/integrations/document_loaders/aws_s3_file"
    },
    "SQLDatabase": {
        "Rebuff": "https://python.langchain.com/docs/integrations/providers/rebuff",
        "SQL Database Agent": "https://python.langchain.com/docs/integrations/toolkits/sql_database",
        "Cookbook": "https://python.langchain.com/docs/guides/expression_language/cookbook",
        "SQL": "https://python.langchain.com/docs/use_cases/sql",
        "Multiple Retrieval Sources": "https://python.langchain.com/docs/use_cases/question_answering/how_to/multiple_retrieval"
    },
    "Weaviate": {
        "Weaviate": "https://python.langchain.com/docs/integrations/vectorstores/weaviate",
        "Weaviate self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/weaviate_self_query"
    },
    "AirbyteJSONLoader": {
        "Airbyte": "https://python.langchain.com/docs/integrations/providers/airbyte",
        "Airbyte JSON": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_json"
    },
    "TelegramChatFileLoader": {
        "Telegram": "https://python.langchain.com/docs/integrations/document_loaders/telegram"
    },
    "TelegramChatApiLoader": {
        "Telegram": "https://python.langchain.com/docs/integrations/document_loaders/telegram"
    },
    "PredictionGuard": {
        "Prediction Guard": "https://python.langchain.com/docs/integrations/llms/predictionguard"
    },
    "NotionDirectoryLoader": {
        "Notion DB": "https://python.langchain.com/docs/integrations/providers/notion",
        "Notion DB 1/2": "https://python.langchain.com/docs/integrations/document_loaders/notion",
        "Perform context-aware text splitting": "https://python.langchain.com/docs/use_cases/question_answering/how_to/document-context-aware-QA"
    },
    "NotionDBLoader": {
        "Notion DB": "https://python.langchain.com/docs/integrations/providers/notion",
        "Notion DB 2/2": "https://python.langchain.com/docs/integrations/document_loaders/notiondb"
    },
    "MWDumpLoader": {
        "MediaWikiDump": "https://python.langchain.com/docs/integrations/document_loaders/mediawikidump"
    },
    "BraveSearchLoader": {
        "Brave Search": "https://python.langchain.com/docs/integrations/document_loaders/brave_search"
    },
    "StarRocks": {
        "StarRocks": "https://python.langchain.com/docs/integrations/vectorstores/starrocks"
    },
    "ElasticsearchStore": {
        "Elasticsearch": "https://python.langchain.com/docs/integrations/vectorstores/elasticsearch",
        "Elasticsearch self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/elasticsearch_self_query"
    },
    "DatadogLogsLoader": {
        "Datadog Logs": "https://python.langchain.com/docs/integrations/document_loaders/datadog_logs"
    },
    "ApifyDatasetLoader": {
        "Apify": "https://python.langchain.com/docs/integrations/providers/apify",
        "Apify Dataset": "https://python.langchain.com/docs/integrations/document_loaders/apify_dataset"
    },
    "NLPCloud": {
        "NLPCloud": "https://python.langchain.com/docs/integrations/providers/nlpcloud",
        "NLP Cloud": "https://python.langchain.com/docs/integrations/llms/nlpcloud"
    },
    "Milvus": {
        "Milvus": "https://python.langchain.com/docs/integrations/vectorstores/milvus",
        "Zilliz": "https://python.langchain.com/docs/integrations/vectorstores/zilliz"
    },
    "Qdrant": {
        "Qdrant": "https://python.langchain.com/docs/integrations/vectorstores/qdrant",
        "Qdrant self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/qdrant_self_query"
    },
    "GitbookLoader": {
        "GitBook": "https://python.langchain.com/docs/integrations/document_loaders/gitbook"
    },
    "OpenSearchVectorSearch": {
        "OpenSearch": "https://python.langchain.com/docs/integrations/vectorstores/opensearch"
    },
    "Pinecone": {
        "Pinecone": "https://python.langchain.com/docs/integrations/vectorstores/pinecone",
        "Self-querying with Pinecone": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/pinecone"
    },
    "Rockset": {
        "Rockset": "https://python.langchain.com/docs/integrations/vectorstores/rockset"
    },
    "RocksetLoader": {
        "Rockset": "https://python.langchain.com/docs/integrations/document_loaders/rockset"
    },
    "Minimax": {
        "Minimax": "https://python.langchain.com/docs/integrations/llms/minimax"
    },
    "UnstructuredFileLoader": {
        "Unstructured": "https://python.langchain.com/docs/integrations/providers/unstructured",
        "Unstructured File": "https://python.langchain.com/docs/integrations/document_loaders/unstructured_file"
    },
    "SelfHostedPipeline": {
        "Runhouse": "https://python.langchain.com/docs/integrations/llms/runhouse"
    },
    "SelfHostedHuggingFaceLLM": {
        "Runhouse": "https://python.langchain.com/docs/integrations/llms/runhouse"
    },
    "MlflowCallbackHandler": {
        "MLflow": "https://python.langchain.com/docs/integrations/providers/mlflow_tracking"
    },
    "SpreedlyLoader": {
        "Spreedly": "https://python.langchain.com/docs/integrations/document_loaders/spreedly"
    },
    "OpenLLM": {
        "OpenLLM": "https://python.langchain.com/docs/integrations/llms/openllm"
    },
    "PubMedLoader": {
        "PubMed": "https://python.langchain.com/docs/integrations/document_loaders/pubmed"
    },
    "SearxSearchResults": {
        "SearxNG Search API": "https://python.langchain.com/docs/integrations/providers/searx"
    },
    "SpacyTextSplitter": {
        "spaCy": "https://python.langchain.com/docs/integrations/providers/spacy",
        "Atlas": "https://python.langchain.com/docs/integrations/vectorstores/atlas",
        "Split by tokens ": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/split_by_token"
    },
    "Modal": {
        "Modal": "https://python.langchain.com/docs/integrations/llms/modal"
    },
    "Xinference": {
        "Xorbits Inference (Xinference)": "https://python.langchain.com/docs/integrations/llms/xinference"
    },
    "IFixitLoader": {
        "iFixit": "https://python.langchain.com/docs/integrations/document_loaders/ifixit"
    },
    "AlephAlpha": {
        "Aleph Alpha": "https://python.langchain.com/docs/integrations/llms/aleph_alpha"
    },
    "PipelineAI": {
        "PipelineAI": "https://python.langchain.com/docs/integrations/llms/pipelineai_example"
    },
    "LlamaCpp": {
        "Llama.cpp": "https://python.langchain.com/docs/integrations/llms/llamacpp",
        "Use local LLMs": "https://python.langchain.com/docs/use_cases/question_answering/how_to/local_retrieval_qa",
        "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research"
    },
    "AwaDB": {
        "AwaDB": "https://python.langchain.com/docs/integrations/vectorstores/awadb"
    },
    "ArxivLoader": {
        "Arxiv": "https://python.langchain.com/docs/integrations/document_loaders/arxiv"
    },
    "Anyscale": {
        "Anyscale": "https://python.langchain.com/docs/integrations/llms/anyscale"
    },
    "StripeLoader": {
        "Stripe": "https://python.langchain.com/docs/integrations/document_loaders/stripe"
    },
    "Bagel": {
        "BagelDB": "https://python.langchain.com/docs/integrations/vectorstores/bageldb"
    },
    "BlackboardLoader": {
        "Blackboard": "https://python.langchain.com/docs/integrations/document_loaders/blackboard"
    },
    "WhatsAppChatLoader": {
        "WhatsApp": "https://python.langchain.com/docs/integrations/providers/whatsapp",
        "WhatsApp Chat": "https://python.langchain.com/docs/integrations/document_loaders/whatsapp_chat"
    },
    "LanceDB": {
        "LanceDB": "https://python.langchain.com/docs/integrations/vectorstores/lancedb"
    },
    "OneDriveLoader": {
        "Microsoft OneDrive": "https://python.langchain.com/docs/integrations/document_loaders/microsoft_onedrive"
    },
    "AnalyticDB": {
        "AnalyticDB": "https://python.langchain.com/docs/integrations/vectorstores/analyticdb"
    },
    "YoutubeLoader": {
        "YouTube": "https://python.langchain.com/docs/integrations/providers/youtube",
        "YouTube transcripts": "https://python.langchain.com/docs/integrations/document_loaders/youtube_transcript"
    },
    "GoogleApiYoutubeLoader": {
        "YouTube": "https://python.langchain.com/docs/integrations/providers/youtube",
        "YouTube transcripts": "https://python.langchain.com/docs/integrations/document_loaders/youtube_transcript"
    },
    "PromptLayerOpenAI": {
        "PromptLayer": "https://python.langchain.com/docs/integrations/providers/promptlayer",
        "PromptLayer OpenAI": "https://python.langchain.com/docs/integrations/llms/promptlayer_openai"
    },
    "Activeloop DeepLake": {
        "Deep Lake": "https://python.langchain.com/docs/integrations/providers/activeloop_deeplake",
        "Activeloop's Deep Lake": "https://python.langchain.com/docs/integrations/vectorstores/activeloop_deeplake",
        "Analysis of Twitter the-algorithm source code with LangChain, GPT4 and Activeloop's Deep Lake": "https://python.langchain.com/docs/use_cases/question_answering/how_to/code/twitter-the-algorithm-analysis-deeplake",
        "Use LangChain, GPT and Activeloop's Deep Lake to work with code base": "https://python.langchain.com/docs/use_cases/question_answering/how_to/code/code-analysis-deeplake",
        "QA using Activeloop's DeepLake": "https://python.langchain.com/docs/use_cases/question_answering/integrations/semantic-search-over-chat",
        "Deep Lake self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/activeloop_deeplake_self_query"
    },
    "WhyLabsCallbackHandler": {
        "WhyLabs": "https://python.langchain.com/docs/integrations/providers/whylabs_profiling"
    },
    "FlyteCallbackHandler": {
        "Flyte": "https://python.langchain.com/docs/integrations/providers/flyte"
    },
    "wandb_tracing_enabled": {
        "WandB Tracing": "https://python.langchain.com/docs/integrations/providers/wandb_tracing"
    },
    "ManifestWrapper": {
        "Hazy Research": "https://python.langchain.com/docs/integrations/providers/hazy_research",
        "Manifest": "https://python.langchain.com/docs/integrations/llms/manifest"
    },
    "Marqo": {
        "Marqo": "https://python.langchain.com/docs/integrations/vectorstores/marqo"
    },
    "IMSDbLoader": {
        "IMSDb": "https://python.langchain.com/docs/integrations/document_loaders/imsdb"
    },
    "PGVector": {
        "PGVector": "https://python.langchain.com/docs/integrations/vectorstores/pgvector"
    },
    "DeepInfra": {
        "DeepInfra": "https://python.langchain.com/docs/integrations/llms/deepinfra_example"
    },
    "ZeroShotAgent": {
        "Jina": "https://python.langchain.com/docs/integrations/providers/jina",
        "NIBittensorLLM": "https://python.langchain.com/docs/integrations/llms/bittensor",
        "BabyAGI with Tools": "https://python.langchain.com/docs/use_cases/agents/baby_agi_with_agent",
        "Adding Message Memory backed by a database to an Agent": "https://python.langchain.com/docs/modules/memory/agent_with_memory_in_db",
        "How to add Memory to an Agent": "https://python.langchain.com/docs/modules/memory/agent_with_memory",
        "Custom MRKL agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_mrkl_agent",
        "Shared memory across agents and tools": "https://python.langchain.com/docs/modules/agents/how_to/sharedmemory_for_tools"
    },
    "RedditPostsLoader": {
        "Reddit": "https://python.langchain.com/docs/integrations/document_loaders/reddit"
    },
    "TrelloLoader": {
        "Trello": "https://python.langchain.com/docs/integrations/document_loaders/trello"
    },
    "AtlasDB": {
        "AtlasDB": "https://python.langchain.com/docs/integrations/providers/atlas",
        "Atlas": "https://python.langchain.com/docs/integrations/vectorstores/atlas"
    },
    "SKLearnVectorStore": {
        "scikit-learn": "https://python.langchain.com/docs/integrations/vectorstores/sklearn"
    },
    "EverNoteLoader": {
        "EverNote": "https://python.langchain.com/docs/integrations/document_loaders/evernote"
    },
    "TwitterTweetLoader": {
        "Twitter": "https://python.langchain.com/docs/integrations/document_loaders/twitter"
    },
    "DiscordChatLoader": {
        "Discord": "https://python.langchain.com/docs/integrations/document_loaders/discord"
    },
    "RedisCache": {
        "Redis": "https://python.langchain.com/docs/integrations/providers/redis",
        "Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching"
    },
    "RedisSemanticCache": {
        "Redis": "https://python.langchain.com/docs/integrations/providers/redis",
        "Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching"
    },
    "Redis": {
        "Redis": "https://python.langchain.com/docs/integrations/vectorstores/redis"
    },
    "SelfQueryRetriever": {
        "Chroma": "https://python.langchain.com/docs/integrations/providers/.ipynb_checkpoints/chroma-checkpoint",
        "Docugami": "https://python.langchain.com/docs/integrations/document_loaders/docugami",
        "Perform context-aware text splitting": "https://python.langchain.com/docs/use_cases/question_answering/how_to/document-context-aware-QA",
        "Weaviate self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/weaviate_self_query",
        "Elasticsearch self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/elasticsearch_self_query",
        "Chroma self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/chroma_self_query",
        "Self-querying with Pinecone": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/pinecone",
        "Self-querying with MyScale": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/myscale_self_query",
        "Deep Lake self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/activeloop_deeplake_self_query",
        "Qdrant self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/qdrant_self_query"
    },
    "ClearMLCallbackHandler": {
        "ClearML": "https://python.langchain.com/docs/integrations/providers/clearml_tracking"
    },
    "Cohere": {
        "Cohere": "https://python.langchain.com/docs/integrations/llms/cohere"
    },
    "SlackDirectoryLoader": {
        "Slack": "https://python.langchain.com/docs/integrations/document_loaders/slack"
    },
    "LLMContentHandler": {
        "SageMaker Endpoint": "https://python.langchain.com/docs/integrations/providers/sagemaker_endpoint",
        "SageMakerEndpoint": "https://python.langchain.com/docs/integrations/llms/sagemaker"
    },
    "ContentHandlerBase": {
        "SageMaker Endpoint": "https://python.langchain.com/docs/integrations/providers/sagemaker_endpoint"
    },
    "HNLoader": {
        "Hacker News": "https://python.langchain.com/docs/integrations/document_loaders/hacker_news"
    },
    "Annoy": {
        "Annoy": "https://python.langchain.com/docs/integrations/vectorstores/annoy"
    },
    "DashVector": {
        "DashVector": "https://python.langchain.com/docs/integrations/vectorstores/dashvector"
    },
    "GCSDirectoryLoader": {
        "Google Cloud Storage": "https://python.langchain.com/docs/integrations/providers/google_cloud_storage",
        "Google Cloud Storage Directory": "https://python.langchain.com/docs/integrations/document_loaders/google_cloud_storage_directory"
    },
    "GCSFileLoader": {
        "Google Cloud Storage": "https://python.langchain.com/docs/integrations/providers/google_cloud_storage",
        "Google Cloud Storage File": "https://python.langchain.com/docs/integrations/document_loaders/google_cloud_storage_file"
    },
    "ArthurCallbackHandler": {
        "Arthur": "https://python.langchain.com/docs/integrations/providers/arthur_tracking"
    },
    "DuckDBLoader": {
        "DuckDB": "https://python.langchain.com/docs/integrations/document_loaders/duckdb"
    },
    "Petals": {
        "Petals": "https://python.langchain.com/docs/integrations/llms/petals_example"
    },
    "MomentoCache": {
        "Momento": "https://python.langchain.com/docs/integrations/providers/momento",
        "Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching"
    },
    "NIBittensorLLM": {
        "NIBittensor": "https://python.langchain.com/docs/integrations/providers/bittensor",
        "NIBittensorLLM": "https://python.langchain.com/docs/integrations/llms/bittensor"
    },
    "AirtableLoader": {
        "Airtable": "https://python.langchain.com/docs/integrations/document_loaders/airtable"
    },
    "TensorflowDatasetLoader": {
        "TensorFlow Datasets": "https://python.langchain.com/docs/integrations/document_loaders/tensorflow_datasets"
    },
    "Clarifai": {
        "Clarifai": "https://python.langchain.com/docs/integrations/llms/clarifai"
    },
    "BigQueryLoader": {
        "Google BigQuery": "https://python.langchain.com/docs/integrations/document_loaders/google_bigquery"
    },
    "RoamLoader": {
        "Roam": "https://python.langchain.com/docs/integrations/document_loaders/roam"
    },
    "Portkey": {
        "Log, Trace, and Monitor Langchain LLM Calls": "https://python.langchain.com/docs/integrations/providers/portkey/logging_tracing_portkey",
        "Portkey": "https://python.langchain.com/docs/integrations/providers/portkey/index"
    },
    "Vectara": {
        "Vectara": "https://python.langchain.com/docs/integrations/vectorstores/vectara",
        "Chat Over Documents with Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_chat",
        "Vectara Text Generation": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_text_generation"
    },
    "VectaraRetriever": {
        "Chat Over Documents with Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_chat"
    },
    "load_qa_chain": {
        "Chat Over Documents with Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_chat",
        "SageMakerEndpoint": "https://python.langchain.com/docs/integrations/llms/sagemaker",
        "QA over Documents": "https://python.langchain.com/docs/use_cases/question_answering/index",
        "Use local LLMs": "https://python.langchain.com/docs/use_cases/question_answering/how_to/local_retrieval_qa",
        "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research",
        "How to add memory to a Multi-Input Chain": "https://python.langchain.com/docs/modules/memory/adding_memory_chain_multiple_inputs"
    },
    "CONDENSE_QUESTION_PROMPT": {
        "Chat Over Documents with Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_chat"
    },
    "load_qa_with_sources_chain": {
        "Chat Over Documents with Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_chat",
        "!pip install bs4": "https://python.langchain.com/docs/use_cases/autonomous_agents/marathon_times"
    },
    "QA_PROMPT": {
        "Chat Over Documents with Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_chat"
    },
    "create_csv_agent": {
        "CSV Agent": "https://python.langchain.com/docs/integrations/toolkits/csv"
    },
    "create_xorbits_agent": {
        "Xorbits Agent": "https://python.langchain.com/docs/integrations/toolkits/xorbits"
    },
    "JiraToolkit": {
        "Jira": "https://python.langchain.com/docs/integrations/toolkits/jira"
    },
    "JiraAPIWrapper": {
        "Jira": "https://python.langchain.com/docs/integrations/toolkits/jira"
    },
    "create_spark_dataframe_agent": {
        "Spark Dataframe Agent": "https://python.langchain.com/docs/integrations/toolkits/spark"
    },
    "PyPDFLoader": {
        "Document Comparison": "https://python.langchain.com/docs/integrations/toolkits/document_comparison_toolkit",
        "Google Cloud Storage File": "https://python.langchain.com/docs/integrations/document_loaders/google_cloud_storage_file",
        "MergeDocLoader": "https://python.langchain.com/docs/integrations/document_loaders/merge_doc_loader",
        "QA using Activeloop's DeepLake": "https://python.langchain.com/docs/use_cases/question_answering/integrations/semantic-search-over-chat"
    },
    "create_python_agent": {
        "Python Agent": "https://python.langchain.com/docs/integrations/toolkits/python"
    },
    "PythonREPLTool": {
        "Python Agent": "https://python.langchain.com/docs/integrations/toolkits/python"
    },
    "create_pbi_agent": {
        "PowerBI Dataset Agent": "https://python.langchain.com/docs/integrations/toolkits/powerbi"
    },
    "PowerBIToolkit": {
        "PowerBI Dataset Agent": "https://python.langchain.com/docs/integrations/toolkits/powerbi"
    },
    "PowerBIDataset": {
        "PowerBI Dataset Agent": "https://python.langchain.com/docs/integrations/toolkits/powerbi"
    },
    "AzureCognitiveServicesToolkit": {
        "Azure Cognitive Services Toolkit": "https://python.langchain.com/docs/integrations/toolkits/azure_cognitive_services"
    },
    "Requests": {
        "Natural Language APIs": "https://python.langchain.com/docs/integrations/toolkits/openapi_nla"
    },
    "APIOperation": {
        "Natural Language APIs": "https://python.langchain.com/docs/integrations/toolkits/openapi_nla"
    },
    "OpenAPISpec": {
        "Natural Language APIs": "https://python.langchain.com/docs/integrations/toolkits/openapi_nla"
    },
    "NLAToolkit": {
        "Natural Language APIs": "https://python.langchain.com/docs/integrations/toolkits/openapi_nla",
        "Plug-and-Plai": "https://python.langchain.com/docs/use_cases/agents/custom_agent_with_plugin_retrieval_using_plugnplai",
        "Custom Agent with PlugIn Retrieval": "https://python.langchain.com/docs/use_cases/agents/custom_agent_with_plugin_retrieval"
    },
    "GmailToolkit": {
        "Gmail Toolkit": "https://python.langchain.com/docs/integrations/toolkits/gmail"
    },
    "build_resource_service": {
        "Gmail Toolkit": "https://python.langchain.com/docs/integrations/toolkits/gmail"
    },
    "get_gmail_credentials": {
        "Gmail Toolkit": "https://python.langchain.com/docs/integrations/toolkits/gmail"
    },
    "create_json_agent": {
        "JSON Agent": "https://python.langchain.com/docs/integrations/toolkits/json"
    },
    "JsonToolkit": {
        "JSON Agent": "https://python.langchain.com/docs/integrations/toolkits/json"
    },
    "JsonSpec": {
        "JSON Agent": "https://python.langchain.com/docs/integrations/toolkits/json",
        "OpenAPI agents": "https://python.langchain.com/docs/integrations/toolkits/openapi"
    },
    "GitHubToolkit": {
        "Github Toolkit": "https://python.langchain.com/docs/integrations/toolkits/github"
    },
    "GitHubAPIWrapper": {
        "Github Toolkit": "https://python.langchain.com/docs/integrations/toolkits/github"
    },
    "GitHubAction": {
        "Github Toolkit": "https://python.langchain.com/docs/integrations/toolkits/github"
    },
    "create_spark_sql_agent": {
        "Spark SQL Agent": "https://python.langchain.com/docs/integrations/toolkits/spark_sql"
    },
    "SparkSQLToolkit": {
        "Spark SQL Agent": "https://python.langchain.com/docs/integrations/toolkits/spark_sql"
    },
    "SparkSQL": {
        "Spark SQL Agent": "https://python.langchain.com/docs/integrations/toolkits/spark_sql"
    },
    "create_sync_playwright_browser": {
        "PlayWright Browser Toolkit": "https://python.langchain.com/docs/integrations/toolkits/playwright"
    },
    "O365Toolkit": {
        "Office365 Toolkit": "https://python.langchain.com/docs/integrations/toolkits/office365"
    },
    "create_pandas_dataframe_agent": {
        "Pandas Dataframe Agent": "https://python.langchain.com/docs/integrations/toolkits/pandas",
        "!pip install bs4": "https://python.langchain.com/docs/use_cases/autonomous_agents/marathon_times"
    },
    "MultionToolkit": {
        "MultiOn Toolkit": "https://python.langchain.com/docs/integrations/toolkits/multion"
    },
    "AmadeusToolkit": {
        "Amadeus Toolkit": "https://python.langchain.com/docs/integrations/toolkits/amadeus"
    },
    "create_vectorstore_agent": {
        "Vectorstore Agent": "https://python.langchain.com/docs/integrations/toolkits/vectorstore"
    },
    "VectorStoreToolkit": {
        "Vectorstore Agent": "https://python.langchain.com/docs/integrations/toolkits/vectorstore"
    },
    "VectorStoreInfo": {
        "Vectorstore Agent": "https://python.langchain.com/docs/integrations/toolkits/vectorstore"
    },
    "create_vectorstore_router_agent": {
        "Vectorstore Agent": "https://python.langchain.com/docs/integrations/toolkits/vectorstore"
    },
    "VectorStoreRouterToolkit": {
        "Vectorstore Agent": "https://python.langchain.com/docs/integrations/toolkits/vectorstore"
    },
    "reduce_openapi_spec": {
        "OpenAPI agents": "https://python.langchain.com/docs/integrations/toolkits/openapi"
    },
    "RequestsWrapper": {
        "OpenAPI agents": "https://python.langchain.com/docs/integrations/toolkits/openapi"
    },
    "create_openapi_agent": {
        "OpenAPI agents": "https://python.langchain.com/docs/integrations/toolkits/openapi"
    },
    "OpenAPIToolkit": {
        "OpenAPI agents": "https://python.langchain.com/docs/integrations/toolkits/openapi"
    },
    "RetrievalQAWithSourcesChain": {
        "Weaviate": "https://python.langchain.com/docs/integrations/vectorstores/weaviate",
        "Marqo": "https://python.langchain.com/docs/integrations/vectorstores/marqo",
        "Psychic": "https://python.langchain.com/docs/integrations/document_loaders/psychic",
        "Web Scraping": "https://python.langchain.com/docs/use_cases/web_scraping",
        "QA over Documents": "https://python.langchain.com/docs/use_cases/question_answering/index",
        "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research"
    },
    "MatchingEngine": {
        "MatchingEngine": "https://python.langchain.com/docs/integrations/vectorstores/matchingengine"
    },
    "ScaNN": {
        "ScaNN": "https://python.langchain.com/docs/integrations/vectorstores/scann"
    },
    "google_palm": {
        "ScaNN": "https://python.langchain.com/docs/integrations/vectorstores/scann"
    },
    "XataVectorStore": {
        "Xata": "https://python.langchain.com/docs/integrations/vectorstores/xata"
    },
    "InMemoryDocstore": {
        "Annoy": "https://python.langchain.com/docs/integrations/vectorstores/annoy",
        "AutoGPT": "https://python.langchain.com/docs/use_cases/autonomous_agents/autogpt",
        "BabyAGI User Guide": "https://python.langchain.com/docs/use_cases/agents/baby_agi",
        "BabyAGI with Tools": "https://python.langchain.com/docs/use_cases/agents/baby_agi_with_agent",
        "!pip install bs4": "https://python.langchain.com/docs/use_cases/autonomous_agents/marathon_times",
        "Generative Agents in LangChain": "https://python.langchain.com/docs/use_cases/agent_simulations/characters"
    },
    "OpenAIChat": {
        "Activeloop's Deep Lake": "https://python.langchain.com/docs/integrations/vectorstores/activeloop_deeplake"
    },
    "AlibabaCloudOpenSearch": {
        "Alibaba Cloud OpenSearch": "https://python.langchain.com/docs/integrations/vectorstores/alibabacloud_opensearch"
    },
    "AlibabaCloudOpenSearchSettings": {
        "Alibaba Cloud OpenSearch": "https://python.langchain.com/docs/integrations/vectorstores/alibabacloud_opensearch"
    },
    "StarRocksSettings": {
        "StarRocks": "https://python.langchain.com/docs/integrations/vectorstores/starrocks"
    },
    "TokenTextSplitter": {
        "StarRocks": "https://python.langchain.com/docs/integrations/vectorstores/starrocks",
        "Split by tokens ": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/split_by_token"
    },
    "DirectoryLoader": {
        "StarRocks": "https://python.langchain.com/docs/integrations/vectorstores/starrocks"
    },
    "UnstructuredMarkdownLoader": {
        "StarRocks": "https://python.langchain.com/docs/integrations/vectorstores/starrocks"
    },
    "DocArrayHnswSearch": {
        "DocArrayHnswSearch": "https://python.langchain.com/docs/integrations/vectorstores/docarray_hnsw"
    },
    "MyScaleSettings": {
        "MyScale": "https://python.langchain.com/docs/integrations/vectorstores/myscale"
    },
    "Clickhouse": {
        "ClickHouse Vector Search": "https://python.langchain.com/docs/integrations/vectorstores/clickhouse"
    },
    "ClickhouseSettings": {
        "ClickHouse Vector Search": "https://python.langchain.com/docs/integrations/vectorstores/clickhouse"
    },
    "SupabaseVectorStore": {
        "Supabase (Postgres)": "https://python.langchain.com/docs/integrations/vectorstores/supabase"
    },
    "AzureSearch": {
        "Azure Cognitive Search": "https://python.langchain.com/docs/integrations/vectorstores/azuresearch"
    },
    "Cassandra": {
        "Cassandra": "https://python.langchain.com/docs/integrations/vectorstores/cassandra"
    },
    "USearch": {
        "USearch": "https://python.langchain.com/docs/integrations/vectorstores/usearch"
    },
    "ElasticVectorSearch": {
        "Elasticsearch": "https://python.langchain.com/docs/integrations/vectorstores/elasticsearch",
        "How to add memory to a Multi-Input Chain": "https://python.langchain.com/docs/modules/memory/adding_memory_chain_multiple_inputs"
    },
    "DocArrayInMemorySearch": {
        "DocArrayInMemorySearch": "https://python.langchain.com/docs/integrations/vectorstores/docarray_in_memory"
    },
    "PGEmbedding": {
        "pg_embedding": "https://python.langchain.com/docs/integrations/vectorstores/pgembedding"
    },
    "MongoDBAtlasVectorSearch": {
        "MongoDB Atlas": "https://python.langchain.com/docs/integrations/vectorstores/mongodb_atlas"
    },
    "Meilisearch": {
        "Meilisearch": "https://python.langchain.com/docs/integrations/vectorstores/meilisearch"
    },
    "AsyncChromiumLoader": {
        "Beautiful Soup": "https://python.langchain.com/docs/integrations/document_transformers/beautiful_soup",
        "Async Chromium": "https://python.langchain.com/docs/integrations/document_loaders/async_chromium",
        "Web Scraping": "https://python.langchain.com/docs/use_cases/web_scraping"
    },
    "BeautifulSoupTransformer": {
        "Beautiful Soup": "https://python.langchain.com/docs/integrations/document_transformers/beautiful_soup",
        "Web Scraping": "https://python.langchain.com/docs/use_cases/web_scraping"
    },
    "NucliaTextTransformer": {
        "Nuclia Understanding API document transformer": "https://python.langchain.com/docs/integrations/document_transformers/nuclia_transformer"
    },
    "create_metadata_tagger": {
        "OpenAI Functions Metadata Tagger": "https://python.langchain.com/docs/integrations/document_transformers/openai_metadata_tagger"
    },
    "AsyncHtmlLoader": {
        "html2text": "https://python.langchain.com/docs/integrations/document_transformers/html2text",
        "AsyncHtmlLoader": "https://python.langchain.com/docs/integrations/document_loaders/async_html",
        "Web Scraping": "https://python.langchain.com/docs/use_cases/web_scraping"
    },
    "Html2TextTransformer": {
        "html2text": "https://python.langchain.com/docs/integrations/document_transformers/html2text",
        "Async Chromium": "https://python.langchain.com/docs/integrations/document_loaders/async_chromium",
        "Web Scraping": "https://python.langchain.com/docs/use_cases/web_scraping"
    },
    "DoctranPropertyExtractor": {
        "Doctran Extract Properties": "https://python.langchain.com/docs/integrations/document_transformers/doctran_extract_properties"
    },
    "DoctranQATransformer": {
        "Doctran Interrogate Documents": "https://python.langchain.com/docs/integrations/document_transformers/doctran_interrogate_document"
    },
    "DoctranTextTranslator": {
        "Doctran Translate Documents": "https://python.langchain.com/docs/integrations/document_transformers/doctran_translate_document"
    },
    "SnowflakeLoader": {
        "Snowflake": "https://python.langchain.com/docs/integrations/document_loaders/snowflake"
    },
    "AcreomLoader": {
        "acreom": "https://python.langchain.com/docs/integrations/document_loaders/acreom"
    },
    "ArcGISLoader": {
        "ArcGIS": "https://python.langchain.com/docs/integrations/document_loaders/arcgis"
    },
    "UnstructuredCSVLoader": {
        "CSV": "https://python.langchain.com/docs/integrations/document_loaders/csv"
    },
    "XorbitsLoader": {
        "Xorbits Pandas DataFrame": "https://python.langchain.com/docs/integrations/document_loaders/xorbits"
    },
    "UnstructuredEmailLoader": {
        "Email": "https://python.langchain.com/docs/integrations/document_loaders/email"
    },
    "OutlookMessageLoader": {
        "Email": "https://python.langchain.com/docs/integrations/document_loaders/email"
    },
    "BlockchainDocumentLoader": {
        "Blockchain": "https://python.langchain.com/docs/integrations/document_loaders/blockchain"
    },
    "BlockchainType": {
        "Blockchain": "https://python.langchain.com/docs/integrations/document_loaders/blockchain"
    },
    "RecursiveUrlLoader": {
        "Recursive URL Loader": "https://python.langchain.com/docs/integrations/document_loaders/recursive_url_loader"
    },
    "JoplinLoader": {
        "Joplin": "https://python.langchain.com/docs/integrations/document_loaders/joplin"
    },
    "AirbyteSalesforceLoader": {
        "Airbyte Salesforce": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_salesforce"
    },
    "EtherscanLoader": {
        "Etherscan Loader": "https://python.langchain.com/docs/integrations/document_loaders/Etherscan"
    },
    "AirbyteCDKLoader": {
        "Airbyte CDK": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_cdk"
    },
    "Docx2txtLoader": {
        "Microsoft Word": "https://python.langchain.com/docs/integrations/document_loaders/microsoft_word"
    },
    "OpenAIWhisperParser": {
        "Loading documents from a YouTube url": "https://python.langchain.com/docs/integrations/document_loaders/youtube_audio"
    },
    "YoutubeAudioLoader": {
        "Loading documents from a YouTube url": "https://python.langchain.com/docs/integrations/document_loaders/youtube_audio"
    },
    "UnstructuredURLLoader": {
        "URL": "https://python.langchain.com/docs/integrations/document_loaders/url"
    },
    "SeleniumURLLoader": {
        "URL": "https://python.langchain.com/docs/integrations/document_loaders/url"
    },
    "PlaywrightURLLoader": {
        "URL": "https://python.langchain.com/docs/integrations/document_loaders/url"
    },
    "AirbyteStripeLoader": {
        "Airbyte Stripe": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_stripe"
    },
    "OpenCityDataLoader": {
        "Geopandas": "https://python.langchain.com/docs/integrations/document_loaders/geopandas",
        "Open City Data": "https://python.langchain.com/docs/integrations/document_loaders/open_city_data"
    },
    "GeoDataFrameLoader": {
        "Geopandas": "https://python.langchain.com/docs/integrations/document_loaders/geopandas"
    },
    "OBSFileLoader": {
        "Huawei OBS File": "https://python.langchain.com/docs/integrations/document_loaders/huawei_obs_file"
    },
    "HuggingFaceDatasetLoader": {
        "HuggingFace dataset": "https://python.langchain.com/docs/integrations/document_loaders/hugging_face_dataset"
    },
    "DropboxLoader": {
        "Dropbox": "https://python.langchain.com/docs/integrations/document_loaders/dropbox"
    },
    "AirbyteTypeformLoader": {
        "Airbyte Typeform": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_typeform"
    },
    "MHTMLLoader": {
        "mhtml": "https://python.langchain.com/docs/integrations/document_loaders/mhtml"
    },
    "NewsURLLoader": {
        "News URL": "https://python.langchain.com/docs/integrations/document_loaders/news"
    },
    "ImageCaptionLoader": {
        "Image captions": "https://python.langchain.com/docs/integrations/document_loaders/image_captions"
    },
    "UnstructuredRSTLoader": {
        "RST": "https://python.langchain.com/docs/integrations/document_loaders/rst"
    },
    "ConversationBufferWindowMemory": {
        "Figma": "https://python.langchain.com/docs/integrations/document_loaders/figma",
        "Chatbots": "https://python.langchain.com/docs/use_cases/chatbots",
        "Meta-Prompt": "https://python.langchain.com/docs/use_cases/autonomous_agents/meta_prompt",
        "Create ChatGPT clone": "https://python.langchain.com/docs/modules/agents/how_to/chatgpt_clone"
    },
    "UnstructuredImageLoader": {
        "Images": "https://python.langchain.com/docs/integrations/document_loaders/image"
    },
    "NucliaLoader": {
        "Nuclia Understanding API document loader": "https://python.langchain.com/docs/integrations/document_loaders/nuclia"
    },
    "TencentCOSFileLoader": {
        "Tencent COS File": "https://python.langchain.com/docs/integrations/document_loaders/tencent_cos_file"
    },
    "TomlLoader": {
        "TOML": "https://python.langchain.com/docs/integrations/document_loaders/toml"
    },
    "UnstructuredAPIFileLoader": {
        "Unstructured File": "https://python.langchain.com/docs/integrations/document_loaders/unstructured_file"
    },
    "PsychicLoader": {
        "Psychic": "https://python.langchain.com/docs/integrations/document_loaders/psychic"
    },
    "TencentCOSDirectoryLoader": {
        "Tencent COS Directory": "https://python.langchain.com/docs/integrations/document_loaders/tencent_cos_directory"
    },
    "GitHubIssuesLoader": {
        "GitHub": "https://python.langchain.com/docs/integrations/document_loaders/github"
    },
    "UnstructuredOrgModeLoader": {
        "Org-mode": "https://python.langchain.com/docs/integrations/document_loaders/org_mode"
    },
    "LarkSuiteDocLoader": {
        "LarkSuite (FeiShu)": "https://python.langchain.com/docs/integrations/document_loaders/larksuite"
    },
    "load_summarize_chain": {
        "LarkSuite (FeiShu)": "https://python.langchain.com/docs/integrations/document_loaders/larksuite",
        "Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching",
        "Summarization": "https://python.langchain.com/docs/use_cases/summarization"
    },
    "IuguLoader": {
        "Iugu": "https://python.langchain.com/docs/integrations/document_loaders/iugu"
    },
    "UnstructuredEPubLoader": {
        "EPub ": "https://python.langchain.com/docs/integrations/document_loaders/epub"
    },
    "AttributeInfo": {
        "Docugami": "https://python.langchain.com/docs/integrations/document_loaders/docugami",
        "Perform context-aware text splitting": "https://python.langchain.com/docs/use_cases/question_answering/how_to/document-context-aware-QA",
        "Weaviate self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/weaviate_self_query",
        "Elasticsearch self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/elasticsearch_self_query",
        "Chroma self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/chroma_self_query",
        "Self-querying with Pinecone": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/pinecone",
        "Self-querying with MyScale": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/myscale_self_query",
        "Deep Lake self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/activeloop_deeplake_self_query",
        "Qdrant self-querying ": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/qdrant_self_query"
    },
    "UnstructuredFileIOLoader": {
        "Google Drive": "https://python.langchain.com/docs/integrations/document_loaders/google_drive"
    },
    "BrowserlessLoader": {
        "Browserless": "https://python.langchain.com/docs/integrations/document_loaders/browserless"
    },
    "BibtexLoader": {
        "BibTeX": "https://python.langchain.com/docs/integrations/document_loaders/bibtex"
    },
    "AirbyteHubspotLoader": {
        "Airbyte Hubspot": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_hubspot"
    },
    "AirbyteGongLoader": {
        "Airbyte Gong": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_gong"
    },
    "ReadTheDocsLoader": {
        "ReadTheDocs Documentation": "https://python.langchain.com/docs/integrations/document_loaders/readthedocs_documentation"
    },
    "DataFrameLoader": {
        "Pandas DataFrame": "https://python.langchain.com/docs/integrations/document_loaders/pandas_dataframe"
    },
    "GoogleApiClient": {
        "YouTube transcripts": "https://python.langchain.com/docs/integrations/document_loaders/youtube_transcript"
    },
    "ConcurrentLoader": {
        "Concurrent Loader": "https://python.langchain.com/docs/integrations/document_loaders/concurrent"
    },
    "RSSFeedLoader": {
        "RSS Feeds": "https://python.langchain.com/docs/integrations/document_loaders/rss"
    },
    "NotebookLoader": {
        "Jupyter Notebook": "https://python.langchain.com/docs/integrations/document_loaders/jupyter_notebook",
        "Notebook": "https://python.langchain.com/docs/integrations/document_loaders/example_data/notebook"
    },
    "UnstructuredTSVLoader": {
        "TSV": "https://python.langchain.com/docs/integrations/document_loaders/tsv"
    },
    "UnstructuredODTLoader": {
        "Open Document Format (ODT)": "https://python.langchain.com/docs/integrations/document_loaders/odt"
    },
    "EmbaasBlobLoader": {
        "Embaas": "https://python.langchain.com/docs/integrations/document_loaders/embaas"
    },
    "Blob": {
        "Embaas": "https://python.langchain.com/docs/integrations/document_loaders/embaas"
    },
    "EmbaasLoader": {
        "Embaas": "https://python.langchain.com/docs/integrations/document_loaders/embaas"
    },
    "UnstructuredXMLLoader": {
        "XML": "https://python.langchain.com/docs/integrations/document_loaders/xml"
    },
    "MaxComputeLoader": {
        "Alibaba Cloud MaxCompute": "https://python.langchain.com/docs/integrations/document_loaders/alibaba_cloud_maxcompute"
    },
    "CubeSemanticLoader": {
        "Cube Semantic Layer": "https://python.langchain.com/docs/integrations/document_loaders/cube_semantic"
    },
    "UnstructuredExcelLoader": {
        "Microsoft Excel": "https://python.langchain.com/docs/integrations/document_loaders/excel"
    },
    "Language": {
        "Source Code": "https://python.langchain.com/docs/integrations/document_loaders/source_code",
        "Code Understanding": "https://python.langchain.com/docs/use_cases/code_understanding"
    },
    "LanguageParser": {
        "Source Code": "https://python.langchain.com/docs/integrations/document_loaders/source_code",
        "Code Understanding": "https://python.langchain.com/docs/use_cases/code_understanding"
    },
    "SRTLoader": {
        "Subtitle": "https://python.langchain.com/docs/integrations/document_loaders/subtitle"
    },
    "MastodonTootsLoader": {
        "Mastodon": "https://python.langchain.com/docs/integrations/document_loaders/mastodon"
    },
    "AirbyteShopifyLoader": {
        "Airbyte Shopify": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_shopify"
    },
    "MergedDataLoader": {
        "MergeDocLoader": "https://python.langchain.com/docs/integrations/document_loaders/merge_doc_loader"
    },
    "PySparkDataFrameLoader": {
        "PySpark DataFrame Loader": "https://python.langchain.com/docs/integrations/document_loaders/pyspark_dataframe"
    },
    "AirbyteZendeskSupportLoader": {
        "Airbyte Zendesk Support": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_zendesk_support"
    },
    "CoNLLULoader": {
        "CoNLL-U": "https://python.langchain.com/docs/integrations/document_loaders/conll-u"
    },
    "OBSDirectoryLoader": {
        "Huawei OBS Directory": "https://python.langchain.com/docs/integrations/document_loaders/huawei_obs_directory"
    },
    "FaunaLoader": {
        "Fauna": "https://python.langchain.com/docs/integrations/document_loaders/fauna"
    },
    "SitemapLoader": {
        "Sitemap": "https://python.langchain.com/docs/integrations/document_loaders/sitemap"
    },
    "StochasticAI": {
        "StochasticAI": "https://python.langchain.com/docs/integrations/llms/stochasticai"
    },
    "ForefrontAI": {
        "ForefrontAI": "https://python.langchain.com/docs/integrations/llms/forefrontai_example"
    },
    "CerebriumAI": {
        "CerebriumAI": "https://python.langchain.com/docs/integrations/llms/cerebriumai_example"
    },
    "FireworksChat": {
        "Fireworks": "https://python.langchain.com/docs/integrations/llms/Fireworks"
    },
    "OctoAIEndpoint": {
        "OctoAI Compute Service": "https://python.langchain.com/docs/integrations/llms/octoai"
    },
    "Writer": {
        "Writer": "https://python.langchain.com/docs/integrations/llms/writer"
    },
    "TextGen": {
        "TextGen": "https://python.langchain.com/docs/integrations/llms/textgen"
    },
    "MosaicML": {
        "MosaicML": "https://python.langchain.com/docs/integrations/llms/mosaicml"
    },
    "KoboldApiLLM": {
        "KoboldAI API": "https://python.langchain.com/docs/integrations/llms/koboldai"
    },
    "VertexAI": {
        "Google Cloud Platform Vertex AI PaLM ": "https://python.langchain.com/docs/integrations/llms/google_vertex_ai_palm"
    },
    "Ollama": {
        "Ollama": "https://python.langchain.com/docs/integrations/llms/ollama"
    },
    "LLMResult": {
        "Ollama": "https://python.langchain.com/docs/integrations/llms/ollama",
        "Async callbacks": "https://python.langchain.com/docs/modules/callbacks/async_callbacks"
    },
    "BaseCallbackHandler": {
        "Ollama": "https://python.langchain.com/docs/integrations/llms/ollama",
        "Custom callback handlers": "https://python.langchain.com/docs/modules/callbacks/custom_callbacks",
        "Multiple callback handlers": "https://python.langchain.com/docs/modules/callbacks/multiple_callbacks",
        "Async callbacks": "https://python.langchain.com/docs/modules/callbacks/async_callbacks",
        "Streaming final agent output": "https://python.langchain.com/docs/modules/agents/how_to/streaming_stdout_final_only"
    },
    "TitanTakeoff": {
        "Titan Takeoff": "https://python.langchain.com/docs/integrations/llms/titan_takeoff"
    },
    "GooseAI": {
        "GooseAI": "https://python.langchain.com/docs/integrations/llms/gooseai_example"
    },
    "Databricks": {
        "Databricks": "https://python.langchain.com/docs/integrations/llms/databricks"
    },
    "EdenAI": {
        "Eden AI": "https://python.langchain.com/docs/integrations/llms/edenai"
    },
    "VLLM": {
        "vLLM": "https://python.langchain.com/docs/integrations/llms/vllm"
    },
    "VLLMOpenAI": {
        "vLLM": "https://python.langchain.com/docs/integrations/llms/vllm"
    },
    "MapReduceChain": {
        "Manifest": "https://python.langchain.com/docs/integrations/llms/manifest",
        "Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching",
        "Summarization": "https://python.langchain.com/docs/use_cases/summarization"
    },
    "ModelLaboratory": {
        "Manifest": "https://python.langchain.com/docs/integrations/llms/manifest",
        "Model comparison": "https://python.langchain.com/docs/guides/model_laboratory"
    },
    "Tongyi": {
        "Tongyi Qwen": "https://python.langchain.com/docs/integrations/llms/tongyi"
    },
    "InMemoryCache": {
        "Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching"
    },
    "SQLiteCache": {
        "Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching"
    },
    "GPTCache": {
        "Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching"
    },
    "SQLAlchemyCache": {
        "Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching"
    },
    "AzureMLOnlineEndpoint": {
        "AzureML Online Endpoint": "https://python.langchain.com/docs/integrations/llms/azureml_endpoint_example"
    },
    "ContentFormatterBase": {
        "AzureML Online Endpoint": "https://python.langchain.com/docs/integrations/llms/azureml_endpoint_example"
    },
    "DollyContentFormatter": {
        "AzureML Online Endpoint": "https://python.langchain.com/docs/integrations/llms/azureml_endpoint_example"
    },
    "load_llm": {
        "AzureML Online Endpoint": "https://python.langchain.com/docs/integrations/llms/azureml_endpoint_example",
        "Serialization": "https://python.langchain.com/docs/modules/model_io/models/llms/llm_serialization"
    },
    "AzureMLEndpointClient": {
        "AzureML Online Endpoint": "https://python.langchain.com/docs/integrations/llms/azureml_endpoint_example"
    },
    "OpenLM": {
        "OpenLM": "https://python.langchain.com/docs/integrations/llms/openlm"
    },
    "HuggingFaceTextGenInference": {
        "Huggingface TextGen Inference": "https://python.langchain.com/docs/integrations/llms/huggingface_textgen_inference"
    },
    "ChatGLM": {
        "ChatGLM": "https://python.langchain.com/docs/integrations/llms/chatglm"
    },
    "Replicate": {
        "Replicate": "https://python.langchain.com/docs/integrations/llms/replicate"
    },
    "StrOutputParser": {
        "Fallbacks": "https://python.langchain.com/docs/guides/fallbacks",
        "Cookbook": "https://python.langchain.com/docs/guides/expression_language/cookbook"
    },
    "DatetimeOutputParser": {
        "Fallbacks": "https://python.langchain.com/docs/guides/fallbacks",
        "Datetime parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/datetime"
    },
    "tracing_v2_enabled": {
        "LangSmith Walkthrough": "https://python.langchain.com/docs/guides/langsmith/walkthrough"
    },
    "wait_for_all_tracers": {
        "LangSmith Walkthrough": "https://python.langchain.com/docs/guides/langsmith/walkthrough"
    },
    "EvaluatorType": {
        "LangSmith Walkthrough": "https://python.langchain.com/docs/guides/langsmith/walkthrough",
        "Criteria Evaluation": "https://python.langchain.com/docs/guides/evaluation/string/criteria_eval_chain"
    },
    "RunEvalConfig": {
        "LangSmith Walkthrough": "https://python.langchain.com/docs/guides/langsmith/walkthrough"
    },
    "arun_on_dataset": {
        "LangSmith Walkthrough": "https://python.langchain.com/docs/guides/langsmith/walkthrough"
    },
    "run_on_dataset": {
        "LangSmith Walkthrough": "https://python.langchain.com/docs/guides/langsmith/walkthrough"
    },
    "openai": {
        "OpenAI Adapter": "https://python.langchain.com/docs/guides/adapters/openai"
    },
    "load_evaluator": {
        "Comparing Chain Outputs": "https://python.langchain.com/docs/guides/evaluation/examples/comparisons",
        "Agent Trajectory": "https://python.langchain.com/docs/guides/evaluation/trajectory/trajectory_eval",
        "Pairwise Embedding Distance ": "https://python.langchain.com/docs/guides/evaluation/comparison/pairwise_embedding_distance",
        "Pairwise String Comparison": "https://python.langchain.com/docs/guides/evaluation/comparison/pairwise_string",
        "Criteria Evaluation": "https://python.langchain.com/docs/guides/evaluation/string/criteria_eval_chain",
        "String Distance": "https://python.langchain.com/docs/guides/evaluation/string/string_distance",
        "Embedding Distance": "https://python.langchain.com/docs/guides/evaluation/string/embedding_distance"
    },
    "load_dataset": {
        "Comparing Chain Outputs": "https://python.langchain.com/docs/guides/evaluation/examples/comparisons"
    },
    "AgentAction": {
        "Custom Trajectory Evaluator": "https://python.langchain.com/docs/guides/evaluation/trajectory/custom",
        "Plug-and-Plai": "https://python.langchain.com/docs/use_cases/agents/custom_agent_with_plugin_retrieval_using_plugnplai",
        "Wikibase Agent": "https://python.langchain.com/docs/use_cases/agents/wikibase_agent",
        "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/agents/sales_agent_with_context",
        "Custom Agent with PlugIn Retrieval": "https://python.langchain.com/docs/use_cases/agents/custom_agent_with_plugin_retrieval",
        "Multiple callback handlers": "https://python.langchain.com/docs/modules/callbacks/multiple_callbacks",
        "Custom multi-action agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_multi_action_agent",
        "Custom agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent",
        "Custom agent with tool retrieval": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent_with_tool_retrieval"
    },
    "AgentTrajectoryEvaluator": {
        "Custom Trajectory Evaluator": "https://python.langchain.com/docs/guides/evaluation/trajectory/custom"
    },
    "EmbeddingDistance": {
        "Pairwise Embedding Distance ": "https://python.langchain.com/docs/guides/evaluation/comparison/pairwise_embedding_distance",
        "Embedding Distance": "https://python.langchain.com/docs/guides/evaluation/string/embedding_distance"
    },
    "PairwiseStringEvaluator": {
        "Custom Pairwise Evaluator": "https://python.langchain.com/docs/guides/evaluation/comparison/custom"
    },
    "Criteria": {
        "Criteria Evaluation": "https://python.langchain.com/docs/guides/evaluation/string/criteria_eval_chain"
    },
    "StringEvaluator": {
        "Custom String Evaluator": "https://python.langchain.com/docs/guides/evaluation/string/custom"
    },
    "StringDistance": {
        "String Distance": "https://python.langchain.com/docs/guides/evaluation/string/string_distance"
    },
    "JsonOutputFunctionsParser": {
        "Cookbook": "https://python.langchain.com/docs/guides/expression_language/cookbook"
    },
    "JsonKeyOutputFunctionsParser": {
        "Cookbook": "https://python.langchain.com/docs/guides/expression_language/cookbook"
    },
    "RunnablePassthrough": {
        "Cookbook": "https://python.langchain.com/docs/guides/expression_language/cookbook"
    },
    "RunnableMap": {
        "Cookbook": "https://python.langchain.com/docs/guides/expression_language/cookbook",
        "Interface": "https://python.langchain.com/docs/guides/expression_language/interface"
    },
    "format_document": {
        "Cookbook": "https://python.langchain.com/docs/guides/expression_language/cookbook"
    },
    "create_tagging_chain_pydantic": {
        "Cookbook": "https://python.langchain.com/docs/guides/expression_language/cookbook",
        "Tagging": "https://python.langchain.com/docs/use_cases/tagging"
    },
    "RouterRunnable": {
        "Cookbook": "https://python.langchain.com/docs/guides/expression_language/cookbook"
    },
    "RunnableLambda": {
        "Cookbook": "https://python.langchain.com/docs/guides/expression_language/cookbook"
    },
    "MessagesPlaceholder": {
        "Cookbook": "https://python.langchain.com/docs/guides/expression_language/cookbook",
        "Chatbots": "https://python.langchain.com/docs/use_cases/chatbots",
        "Conversational Retrieval Agent": "https://python.langchain.com/docs/use_cases/question_answering/how_to/conversational_retrieval_agents",
        "How to add Memory to an LLMChain": "https://python.langchain.com/docs/modules/memory/adding_memory",
        "Add Memory to OpenAI Functions Agent": "https://python.langchain.com/docs/modules/agents/how_to/add_memory_openai_functions",
        "Types of `MessagePromptTemplate`": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/msg_prompt_templates"
    },
    "WebResearchRetriever": {
        "Web Scraping": "https://python.langchain.com/docs/use_cases/web_scraping",
        "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research"
    },
    "ConversationSummaryMemory": {
        "Chatbots": "https://python.langchain.com/docs/use_cases/chatbots",
        "Code Understanding": "https://python.langchain.com/docs/use_cases/code_understanding",
        "How to use multiple memory classes in the same chain": "https://python.langchain.com/docs/modules/memory/multiple_memory"
    },
    "ConversationSummaryBufferMemory": {
        "Chatbots": "https://python.langchain.com/docs/use_cases/chatbots",
        "ConversationSummaryBufferMemory": "https://python.langchain.com/docs/modules/memory/types/summary_buffer"
    },
    "StuffDocumentsChain": {
        "Summarization": "https://python.langchain.com/docs/use_cases/summarization",
        "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa",
        "Lost in the middle: The problem with long contexts": "https://python.langchain.com/docs/modules/data_connection/document_transformers/post_retrieval/long_context_reorder"
    },
    "ReduceDocumentsChain": {
        "Summarization": "https://python.langchain.com/docs/use_cases/summarization"
    },
    "MapReduceDocumentsChain": {
        "Summarization": "https://python.langchain.com/docs/use_cases/summarization"
    },
    "create_extraction_chain_pydantic": {
        "Extraction": "https://python.langchain.com/docs/use_cases/extraction"
    },
    "PydanticOutputParser": {
        "Extraction": "https://python.langchain.com/docs/use_cases/extraction",
        "MultiQueryRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/MultiQueryRetriever",
        "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research",
        "Retry parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/retry",
        "Pydantic (JSON) parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/pydantic"
    },
    "get_openapi_chain": {
        "Interacting with APIs": "https://python.langchain.com/docs/use_cases/apis"
    },
    "APIChain": {
        "Interacting with APIs": "https://python.langchain.com/docs/use_cases/apis"
    },
    "open_meteo_docs": {
        "Interacting with APIs": "https://python.langchain.com/docs/use_cases/apis"
    },
    "tmdb_docs": {
        "Interacting with APIs": "https://python.langchain.com/docs/use_cases/apis"
    },
    "podcast_docs": {
        "Interacting with APIs": "https://python.langchain.com/docs/use_cases/apis"
    },
    "LLMRequestsChain": {
        "Interacting with APIs": "https://python.langchain.com/docs/use_cases/apis"
    },
    "create_sql_query_chain": {
        "SQL": "https://python.langchain.com/docs/use_cases/sql",
        "Multiple Retrieval Sources": "https://python.langchain.com/docs/use_cases/question_answering/how_to/multiple_retrieval"
    },
    "ElasticsearchDatabaseChain": {
        "SQL": "https://python.langchain.com/docs/use_cases/sql"
    },
    "FileChatMessageHistory": {
        "AutoGPT": "https://python.langchain.com/docs/use_cases/autonomous_agents/autogpt"
    },
    "BaseLLM": {
        "BabyAGI User Guide": "https://python.langchain.com/docs/use_cases/agents/baby_agi",
        "BabyAGI with Tools": "https://python.langchain.com/docs/use_cases/agents/baby_agi_with_agent",
        "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/agents/sales_agent_with_context"
    },
    "VectorStore": {
        "BabyAGI User Guide": "https://python.langchain.com/docs/use_cases/agents/baby_agi",
        "BabyAGI with Tools": "https://python.langchain.com/docs/use_cases/agents/baby_agi_with_agent"
    },
    "Chain": {
        "BabyAGI User Guide": "https://python.langchain.com/docs/use_cases/agents/baby_agi",
        "BabyAGI with Tools": "https://python.langchain.com/docs/use_cases/agents/baby_agi_with_agent",
        "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/agents/sales_agent_with_context",
        "Custom chain": "https://python.langchain.com/docs/modules/chains/how_to/custom_chain"
    },
    "BaseTool": {
        "!pip install bs4": "https://python.langchain.com/docs/use_cases/autonomous_agents/marathon_times",
        "Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools",
        "Combine agents and vector stores": "https://python.langchain.com/docs/modules/agents/how_to/agent_vectorstore",
        "Custom functions with OpenAI Functions Agent": "https://python.langchain.com/docs/modules/agents/how_to/custom-functions-with-openai-functions-agent"
    },
    "BaseCombineDocumentsChain": {
        "!pip install bs4": "https://python.langchain.com/docs/use_cases/autonomous_agents/marathon_times"
    },
    "MultiQueryRetriever": {
        "QA over Documents": "https://python.langchain.com/docs/use_cases/question_answering/index",
        "MultiQueryRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/MultiQueryRetriever"
    },
    "MarkdownHeaderTextSplitter": {
        "Perform context-aware text splitting": "https://python.langchain.com/docs/use_cases/question_answering/how_to/document-context-aware-QA",
        "MarkdownHeaderTextSplitter": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/markdown_header_metadata"
    },
    "create_retriever_tool": {
        "Conversational Retrieval Agent": "https://python.langchain.com/docs/use_cases/question_answering/how_to/conversational_retrieval_agents"
    },
    "create_conversational_retrieval_agent": {
        "Conversational Retrieval Agent": "https://python.langchain.com/docs/use_cases/question_answering/how_to/conversational_retrieval_agents"
    },
    "AgentTokenBufferMemory": {
        "Conversational Retrieval Agent": "https://python.langchain.com/docs/use_cases/question_answering/how_to/conversational_retrieval_agents"
    },
    "create_citation_fuzzy_match_chain": {
        "Cite sources": "https://python.langchain.com/docs/use_cases/question_answering/how_to/qa_citations"
    },
    "BaseRetriever": {
        "Retrieve as you generate with FLARE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/flare"
    },
    "AsyncCallbackManagerForRetrieverRun": {
        "Retrieve as you generate with FLARE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/flare"
    },
    "CallbackManagerForRetrieverRun": {
        "Retrieve as you generate with FLARE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/flare"
    },
    "FlareChain": {
        "Retrieve as you generate with FLARE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/flare"
    },
    "HypotheticalDocumentEmbedder": {
        "Improve document indexing with HyDE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/hyde"
    },
    "create_qa_with_sources_chain": {
        "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa"
    },
    "create_qa_with_structure_chain": {
        "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa"
    },
    "LLMSingleActionAgent": {
        "Plug-and-Plai": "https://python.langchain.com/docs/use_cases/agents/custom_agent_with_plugin_retrieval_using_plugnplai",
        "Wikibase Agent": "https://python.langchain.com/docs/use_cases/agents/wikibase_agent",
        "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/agents/sales_agent_with_context",
        "Custom Agent with PlugIn Retrieval": "https://python.langchain.com/docs/use_cases/agents/custom_agent_with_plugin_retrieval",
        "Custom agent with tool retrieval": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent_with_tool_retrieval"
    },
    "AgentOutputParser": {
        "Plug-and-Plai": "https://python.langchain.com/docs/use_cases/agents/custom_agent_with_plugin_retrieval_using_plugnplai",
        "Wikibase Agent": "https://python.langchain.com/docs/use_cases/agents/wikibase_agent",
        "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/agents/sales_agent_with_context",
        "Custom Agent with PlugIn Retrieval": "https://python.langchain.com/docs/use_cases/agents/custom_agent_with_plugin_retrieval",
        "Custom agent with tool retrieval": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent_with_tool_retrieval"
    },
    "StringPromptTemplate": {
        "Plug-and-Plai": "https://python.langchain.com/docs/use_cases/agents/custom_agent_with_plugin_retrieval_using_plugnplai",
        "Wikibase Agent": "https://python.langchain.com/docs/use_cases/agents/wikibase_agent",
        "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/agents/sales_agent_with_context",
        "Custom Agent with PlugIn Retrieval": "https://python.langchain.com/docs/use_cases/agents/custom_agent_with_plugin_retrieval",
        "Custom agent with tool retrieval": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent_with_tool_retrieval",
        "Custom prompt template": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/custom_prompt_template",
        "Connecting to a Feature Store": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/connecting_to_a_feature_store"
    },
    "AgentFinish": {
        "Plug-and-Plai": "https://python.langchain.com/docs/use_cases/agents/custom_agent_with_plugin_retrieval_using_plugnplai",
        "Wikibase Agent": "https://python.langchain.com/docs/use_cases/agents/wikibase_agent",
        "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/agents/sales_agent_with_context",
        "Custom Agent with PlugIn Retrieval": "https://python.langchain.com/docs/use_cases/agents/custom_agent_with_plugin_retrieval",
        "Custom multi-action agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_multi_action_agent",
        "Running Agent as an Iterator": "https://python.langchain.com/docs/modules/agents/how_to/agent_iter",
        "Custom agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent",
        "Custom agent with tool retrieval": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent_with_tool_retrieval"
    },
    "AIPlugin": {
        "Plug-and-Plai": "https://python.langchain.com/docs/use_cases/agents/custom_agent_with_plugin_retrieval_using_plugnplai",
        "Custom Agent with PlugIn Retrieval": "https://python.langchain.com/docs/use_cases/agents/custom_agent_with_plugin_retrieval"
    },
    "SteamshipImageGenerationTool": {
        "Multi-modal outputs: Image & Text": "https://python.langchain.com/docs/use_cases/multi_modal/image_agent"
    },
    "BaseMessage": {
        "CAMEL Role-Playing Autonomous Cooperative Agents": "https://python.langchain.com/docs/use_cases/agent_simulations/camel_role_playing",
        "Multi-agent decentralized speaker selection": "https://python.langchain.com/docs/use_cases/agent_simulations/multiagent_bidding",
        "Multi-agent authoritarian speaker selection": "https://python.langchain.com/docs/use_cases/agent_simulations/multiagent_authoritarian",
        "Multi-Player Dungeons & Dragons": "https://python.langchain.com/docs/use_cases/agent_simulations/multi_player_dnd",
        "Simulated Environment: Gymnasium": "https://python.langchain.com/docs/use_cases/agent_simulations/gymnasium",
        "Agent Debates with Tools": "https://python.langchain.com/docs/use_cases/agent_simulations/two_agent_debate_tools"
    },
    "NeptuneGraph": {
        "Neptune Open Cypher QA Chain": "https://python.langchain.com/docs/use_cases/more/graph/neptune_cypher_qa"
    },
    "NeptuneOpenCypherQAChain": {
        "Neptune Open Cypher QA Chain": "https://python.langchain.com/docs/use_cases/more/graph/neptune_cypher_qa"
    },
    "NebulaGraphQAChain": {
        "NebulaGraphQAChain": "https://python.langchain.com/docs/use_cases/more/graph/graph_nebula_qa"
    },
    "NebulaGraph": {
        "NebulaGraphQAChain": "https://python.langchain.com/docs/use_cases/more/graph/graph_nebula_qa"
    },
    "KuzuGraph": {
        "KuzuQAChain": "https://python.langchain.com/docs/use_cases/more/graph/graph_kuzu_qa"
    },
    "KuzuQAChain": {
        "KuzuQAChain": "https://python.langchain.com/docs/use_cases/more/graph/graph_kuzu_qa"
    },
    "HugeGraphQAChain": {
        "HugeGraph QA Chain": "https://python.langchain.com/docs/use_cases/more/graph/graph_hugegraph_qa"
    },
    "HugeGraph": {
        "HugeGraph QA Chain": "https://python.langchain.com/docs/use_cases/more/graph/graph_hugegraph_qa"
    },
    "GraphSparqlQAChain": {
        "GraphSparqlQAChain": "https://python.langchain.com/docs/use_cases/more/graph/graph_sparql_qa"
    },
    "RdfGraph": {
        "GraphSparqlQAChain": "https://python.langchain.com/docs/use_cases/more/graph/graph_sparql_qa"
    },
    "ArangoGraph": {
        "ArangoDB QA chain": "https://python.langchain.com/docs/use_cases/more/graph/graph_arangodb_qa"
    },
    "ArangoGraphQAChain": {
        "ArangoDB QA chain": "https://python.langchain.com/docs/use_cases/more/graph/graph_arangodb_qa"
    },
    "GraphIndexCreator": {
        "Graph QA": "https://python.langchain.com/docs/use_cases/more/graph/graph_qa"
    },
    "GraphQAChain": {
        "Graph QA": "https://python.langchain.com/docs/use_cases/more/graph/graph_qa"
    },
    "NetworkxEntityGraph": {
        "Graph QA": "https://python.langchain.com/docs/use_cases/more/graph/graph_qa"
    },
    "GraphCypherQAChain": {
        "Neo4j DB QA chain": "https://python.langchain.com/docs/use_cases/more/graph/graph_cypher_qa"
    },
    "Neo4jGraph": {
        "Neo4j DB QA chain": "https://python.langchain.com/docs/use_cases/more/graph/graph_cypher_qa"
    },
    "LLMBashChain": {
        "Bash chain": "https://python.langchain.com/docs/use_cases/more/code_writing/llm_bash"
    },
    "BashOutputParser": {
        "Bash chain": "https://python.langchain.com/docs/use_cases/more/code_writing/llm_bash"
    },
    "BashProcess": {
        "Bash chain": "https://python.langchain.com/docs/use_cases/more/code_writing/llm_bash"
    },
    "LLMSymbolicMathChain": {
        "LLM Symbolic Math ": "https://python.langchain.com/docs/use_cases/more/code_writing/llm_symbolic_math"
    },
    "LLMSummarizationCheckerChain": {
        "Summarization checker chain": "https://python.langchain.com/docs/use_cases/more/self_check/llm_summarization_checker"
    },
    "LLMCheckerChain": {
        "Self-checking chain": "https://python.langchain.com/docs/use_cases/more/self_check/llm_checker"
    },
    "RegexParser": {
        "Multi-Agent Simulated Environment: Petting Zoo": "https://python.langchain.com/docs/use_cases/agent_simulations/petting_zoo",
        "Multi-agent decentralized speaker selection": "https://python.langchain.com/docs/use_cases/agent_simulations/multiagent_bidding",
        "Multi-agent authoritarian speaker selection": "https://python.langchain.com/docs/use_cases/agent_simulations/multiagent_authoritarian",
        "Simulated Environment: Gymnasium": "https://python.langchain.com/docs/use_cases/agent_simulations/gymnasium"
    },
    "TimeWeightedVectorStoreRetriever": {
        "Generative Agents in LangChain": "https://python.langchain.com/docs/use_cases/agent_simulations/characters"
    },
    "InMemoryStore": {
        "Caching Embeddings": "https://python.langchain.com/docs/modules/data_connection/caching_embeddings",
        "Parent Document Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/parent_document_retriever"
    },
    "LocalFileStore": {
        "Caching Embeddings": "https://python.langchain.com/docs/modules/data_connection/caching_embeddings"
    },
    "RedisStore": {
        "Caching Embeddings": "https://python.langchain.com/docs/modules/data_connection/caching_embeddings"
    },
    "CacheBackedEmbeddings": {
        "Caching Embeddings": "https://python.langchain.com/docs/modules/data_connection/caching_embeddings"
    },
    "EnsembleRetriever": {
        "Ensemble Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/ensemble"
    },
    "ParentDocumentRetriever": {
        "Parent Document Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/parent_document_retriever"
    },
    "SentenceTransformersTokenTextSplitter": {
        "Split by tokens ": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/split_by_token"
    },
    "NLTKTextSplitter": {
        "Split by tokens ": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/split_by_token"
    },
    "ChatMessageHistory": {
        "Adding Message Memory backed by a database to an Agent": "https://python.langchain.com/docs/modules/memory/agent_with_memory_in_db"
    },
    "BaseMemory": {
        "How to create a custom Memory class": "https://python.langchain.com/docs/modules/memory/custom_memory"
    },
    "ConversationKGMemory": {
        "Conversation Knowledge Graph Memory": "https://python.langchain.com/docs/modules/memory/types/kg"
    },
    "ConversationTokenBufferMemory": {
        "ConversationTokenBufferMemory": "https://python.langchain.com/docs/modules/memory/types/token_buffer"
    },
    "tracing_enabled": {
        "Multiple callback handlers": "https://python.langchain.com/docs/modules/callbacks/multiple_callbacks"
    },
    "FileCallbackHandler": {
        "Logging to file": "https://python.langchain.com/docs/modules/callbacks/filecallbackhandler"
    },
    "AsyncCallbackHandler": {
        "Async callbacks": "https://python.langchain.com/docs/modules/callbacks/async_callbacks"
    },
    "StructuredTool": {
        "Multi-Input Tools": "https://python.langchain.com/docs/modules/agents/tools/multi_input_tool",
        "Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools"
    },
    "AsyncCallbackManagerForToolRun": {
        "Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools"
    },
    "CallbackManagerForToolRun": {
        "Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools"
    },
    "ToolException": {
        "Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools"
    },
    "format_tool_to_openai_function": {
        "Tools as OpenAI Functions": "https://python.langchain.com/docs/modules/agents/tools/tools_as_openai_functions"
    },
    "RequestsGetTool": {
        "Tool Input Schema": "https://python.langchain.com/docs/modules/agents/tools/tool_input_validation"
    },
    "HumanApprovalCallbackHandler": {
        "Human-in-the-loop Tool Validation": "https://python.langchain.com/docs/modules/agents/tools/human_approval"
    },
    "XMLAgent": {
        "XML Agent": "https://python.langchain.com/docs/modules/agents/agent_types/xml_agent"
    },
    "DocstoreExplorer": {
        "ReAct document store": "https://python.langchain.com/docs/modules/agents/agent_types/react_docstore"
    },
    "ReadOnlySharedMemory": {
        "Shared memory across agents and tools": "https://python.langchain.com/docs/modules/agents/how_to/sharedmemory_for_tools"
    },
    "BaseMultiActionAgent": {
        "Custom multi-action agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_multi_action_agent"
    },
    "FinalStreamingStdOutCallbackHandler": {
        "Streaming final agent output": "https://python.langchain.com/docs/modules/agents/how_to/streaming_stdout_final_only"
    },
    "LangChainTracer": {
        "Async API": "https://python.langchain.com/docs/modules/agents/how_to/async_agent"
    },
    "BaseSingleActionAgent": {
        "Custom agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent"
    },
    "HumanInputChatModel": {
        "Human input Chat Model": "https://python.langchain.com/docs/modules/model_io/models/chat/human_input_chat_model"
    },
    "FakeListLLM": {
        "Fake LLM": "https://python.langchain.com/docs/modules/model_io/models/llms/fake_llm"
    },
    "CallbackManagerForLLMRun": {
        "Custom LLM": "https://python.langchain.com/docs/modules/model_io/models/llms/custom_llm"
    },
    "LLM": {
        "Custom LLM": "https://python.langchain.com/docs/modules/model_io/models/llms/custom_llm"
    },
    "HumanInputLLM": {
        "Human input LLM": "https://python.langchain.com/docs/modules/model_io/models/llms/human_input_llm"
    },
    "OutputFixingParser": {
        "Retry parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/retry"
    },
    "RetryOutputParser": {
        "Retry parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/retry"
    },
    "RetryWithErrorOutputParser": {
        "Retry parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/retry"
    },
    "EnumOutputParser": {
        "Enum parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/enum"
    },
    "MaxMarginalRelevanceExampleSelector": {
        "Select by maximal marginal relevance (MMR)": "https://python.langchain.com/docs/modules/model_io/prompts/example_selectors/mmr"
    },
    "SemanticSimilarityExampleSelector": {
        "Select by maximal marginal relevance (MMR)": "https://python.langchain.com/docs/modules/model_io/prompts/example_selectors/mmr",
        "Few shot examples for chat models": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot_examples_chat"
    },
    "FewShotPromptTemplate": {
        "Select by maximal marginal relevance (MMR)": "https://python.langchain.com/docs/modules/model_io/prompts/example_selectors/mmr",
        "Select by n-gram overlap": "https://python.langchain.com/docs/modules/model_io/prompts/example_selectors/ngram_overlap"
    },
    "BaseExampleSelector": {
        "Custom example selector": "https://python.langchain.com/docs/modules/model_io/prompts/example_selectors/custom_example_selector"
    },
    "NGramOverlapExampleSelector": {
        "Select by n-gram overlap": "https://python.langchain.com/docs/modules/model_io/prompts/example_selectors/ngram_overlap"
    },
    "FewShotChatMessagePromptTemplate": {
        "Few shot examples for chat models": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot_examples_chat"
    },
    "load_prompt": {
        "Serialization": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/prompt_serialization"
    },
    "ChatMessagePromptTemplate": {
        "Types of `MessagePromptTemplate`": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/msg_prompt_templates"
    },
    "MultiPromptChain": {
        "Router": "https://python.langchain.com/docs/modules/chains/foundational/router"
    },
    "LLMRouterChain": {
        "Router": "https://python.langchain.com/docs/modules/chains/foundational/router"
    },
    "RouterOutputParser": {
        "Router": "https://python.langchain.com/docs/modules/chains/foundational/router"
    },
    "EmbeddingRouterChain": {
        "Router": "https://python.langchain.com/docs/modules/chains/foundational/router"
    },
    "BaseLanguageModel": {
        "Custom chain": "https://python.langchain.com/docs/modules/chains/how_to/custom_chain"
    },
    "AsyncCallbackManagerForChainRun": {
        "Custom chain": "https://python.langchain.com/docs/modules/chains/how_to/custom_chain"
    },
    "CallbackManagerForChainRun": {
        "Custom chain": "https://python.langchain.com/docs/modules/chains/how_to/custom_chain"
    },
    "BasePromptTemplate": {
        "Custom chain": "https://python.langchain.com/docs/modules/chains/how_to/custom_chain"
    },
    "load_chain": {
        "Serialization": "https://python.langchain.com/docs/modules/chains/how_to/serialization",
        "Loading from LangChainHub": "https://python.langchain.com/docs/modules/chains/how_to/from_hub"
    },
    "create_openai_fn_chain": {
        "Using OpenAI functions": "https://python.langchain.com/docs/modules/chains/how_to/openai_functions"
    },
    "create_structured_output_chain": {
        "Using OpenAI functions": "https://python.langchain.com/docs/modules/chains/how_to/openai_functions"
    }
}